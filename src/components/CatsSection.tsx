import React, { useState } from 'react'
import Icon from '@/components/ui/icon'

interface BattleCat {
  id: string
  name: string
  level: number
  health: number
  maxHealth: number
  attack: number
  defense: number
  speed: number
  experience: number
  maxExperience: number
  abilities: string[]
  description: string
  rarity: 'common' | 'rare' | 'epic' | 'legendary'
  image: string
}

const CatsSection: React.FC = () => {
  const [cats, setCats] = useState<BattleCat[]>([
    {
      id: 'default-cat',
      name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –í–æ–∏–Ω',
      level: 1,
      health: 100,
      maxHealth: 100,
      attack: 15,
      defense: 8,
      speed: 12,
      experience: 0,
      maxExperience: 100,
      abilities: [
        '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—Ä—ã–∂–æ–∫ - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –≤—Ä–∞–≥—É',
        '–ó–≤–µ–∑–¥–Ω–∞—è –∞—Ç–∞–∫–∞ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø–æ –ø–ª–æ—â–∞–¥–∏',
        '–ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–ª–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –Ω–∞ 50%'
      ],
      description: '–•—Ä–∞–±—Ä—ã–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ç, –∑–∞—â–∏—Ç–Ω–∏–∫ –≥–∞–ª–∞–∫—Ç–∏–∫–∏. –û–±–ª–∞–¥–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –ª–æ–≤–∫–æ—Å—Ç—å—é –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é –≤ –±–æ—é.',
      rarity: 'common',
      image: 'üê±‚ÄçüöÄ'
    }
  ])

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'common': return 'text-gray-400 border-gray-500'
      case 'rare': return 'text-blue-400 border-blue-500'
      case 'epic': return 'text-purple-400 border-purple-500'
      case 'legendary': return 'text-yellow-400 border-yellow-500'
      default: return 'text-gray-400 border-gray-500'
    }
  }

  const getRarityName = (rarity: string) => {
    switch (rarity) {
      case 'common': return '–û–±—ã—á–Ω—ã–π'
      case 'rare': return '–†–µ–¥–∫–∏–π'
      case 'epic': return '–≠–ø–∏—á–µ—Å–∫–∏–π'
      case 'legendary': return '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
      default: return '–û–±—ã—á–Ω—ã–π'
    }
  }

  // –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ç–æ–≤
  const catNames = [
    '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –°—Ç—Ä–∞–∂', '–ó–≤–µ–∑–¥–Ω—ã–π –û—Ö–æ—Ç–Ω–∏–∫', '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –í–æ–∏–Ω', '–ù–µ–±–µ—Å–Ω—ã–π –ó–∞—â–∏—Ç–Ω–∏–∫',
    '–õ—É–Ω–Ω—ã–π –†—ã—Ü–∞—Ä—å', '–°–æ–ª–Ω–µ—á–Ω—ã–π –ë–æ–µ—Ü', '–ö–æ–º–µ—Ç–Ω—ã–π –ê—Å', '–ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π –•–∏—â–Ω–∏–∫',
    '–ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–π –ì–µ—Ä–æ–π', '–ú–µ–∂–∑–≤–µ–∑–¥–Ω—ã–π –ö–∞–ø–∏—Ç–∞–Ω', '–û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π –°–Ω–∞–π–ø–µ—Ä', '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ù–∏–Ω–¥–∑—è',
    '–ó–≤–µ–∑–¥–æ–ª–µ—Ç–Ω—ã–π –ü–∏–ª–æ—Ç', '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ö–æ–º–∞–Ω–¥–∏—Ä', '–¢—É–º–∞–Ω–Ω—ã–π –ü—Ä–∏–∑—Ä–∞–∫', '–ß–µ—Ä–Ω–∞—è –î—ã—Ä–∞'
  ]

  const catAbilities = {
    common: [
      '–ë—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä - –Ω–∞–Ω–æ—Å–∏—Ç –æ–±—ã—á–Ω—ã–π —É—Ä–æ–Ω',
      '–ü—Ä—ã–∂–æ–∫ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É–∫–ª–æ–Ω–µ–Ω–∏–µ',
      '–¶–∞—Ä–∞–ø–∏–Ω—ã - –±–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ –∫–æ–≥—Ç—è–º–∏'
    ],
    rare: [
      '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ª–ø - —Å—Ç—Ä–µ–ª—è–µ—Ç –ª—É—á–∞–º–∏',
      '–©–∏—Ç –∑–∞—â–∏—Ç—ã - –±–ª–æ–∫–∏—Ä—É–µ—Ç —É—Ä–æ–Ω',
      '–£—Å–∫–æ—Ä–µ–Ω–∏–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ 30%',
      '–õ–µ—á–µ–Ω–∏–µ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ'
    ],
    epic: [
      '–ü–ª–∞–∑–º–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø–æ –æ–±–ª–∞—Å—Ç–∏',
      '–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è',
      '–í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ - –∑–∞–º–µ–¥–ª—è–µ—Ç –≤—Ä–∞–≥–æ–≤',
      '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä - –æ—Ç—Ä–∞–∂–∞–µ—Ç –∞—Ç–∞–∫–∏'
    ],
    legendary: [
      '–ó–≤–µ–∑–¥–Ω–∞—è –±—É—Ä—è - –æ–ø—É—Å—Ç–æ—à–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞',
      '–ö–≤–∞–Ω—Ç–æ–≤—ã–π –ø—Ä—ã–∂–æ–∫ - –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã',
      '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≥–æ—Å–ø–æ–¥—Å—Ç–≤–æ - —É–¥–≤–∞–∏–≤–∞–µ—Ç –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
      '–ß–µ—Ä–Ω–∞—è –¥—ã—Ä–∞ - –∑–∞—Å–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤'
    ]
  }

  const catDescriptions = [
    '–í–µ—Ç–µ—Ä–∞–Ω –º–Ω–æ–≥–∏—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –≤–æ–π–Ω, –∑–∞–∫–∞–ª–µ–Ω–Ω—ã–π –≤ –±–æ—è—Ö',
    '–ú–æ–ª–æ–¥–æ–π, –Ω–æ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –≤–æ–∏–Ω —Å –±–æ–ª—å—à–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º',
    '–ó–∞–≥–∞–¥–æ—á–Ω—ã–π –∫–æ—Ç –∏–∑ –¥–∞–ª–µ–∫–æ–π –≥–∞–ª–∞–∫—Ç–∏–∫–∏ —Å –¥—Ä–µ–≤–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏',
    '–ë—ã–≤—à–∏–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø–∏—Ä–∞—Ç, –ø–µ—Ä–µ—à–µ–¥—à–∏–π –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É –¥–æ–±—Ä–∞',
    '–≠–ª–∏—Ç–Ω—ã–π –±–æ–µ—Ü —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏–ª',
    '–ú—É–¥—Ä—ã–π —Å—Ç—Ä–∞—Ç–µ–≥, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—â–∏–π –¥—É–º–∞—Ç—å, –∞ –ø–æ—Ç–æ–º –¥—Ä–∞—Ç—å—Å—è',
    '–û—Ç–≤–∞–∂–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤',
    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–∏–π, —Å–æ–∑–¥–∞—é—â–∏–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ'
  ]

  const catEmojis = ['üê±‚ÄçüöÄ', 'üê±‚Äçüë§', 'ü¶Å', 'üêØ', 'üêÜ', 'üò∏', 'üòº', 'üôÄ']

  const generateRandomCat = (): BattleCat => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å (—á–µ–º —Ä–µ–∂–µ, —Ç–µ–º –º–µ–Ω—å—à–µ —à–∞–Ω—Å)
    const rarityRoll = Math.random()
    let rarity: 'common' | 'rare' | 'epic' | 'legendary'
    
    if (rarityRoll < 0.6) rarity = 'common'
    else if (rarityRoll < 0.85) rarity = 'rare'
    else if (rarityRoll < 0.97) rarity = 'epic'
    else rarity = 'legendary'

    // –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
    const baseStats = {
      common: { health: 80, attack: 10, defense: 5, speed: 8 },
      rare: { health: 120, attack: 18, defense: 12, speed: 15 },
      epic: { health: 180, attack: 28, defense: 20, speed: 22 },
      legendary: { health: 300, attack: 45, defense: 35, speed: 35 }
    }

    const stats = baseStats[rarity]
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ (¬±20%)
    const randomVariation = () => 0.8 + Math.random() * 0.4
    
    const health = Math.floor(stats.health * randomVariation())
    const attack = Math.floor(stats.attack * randomVariation())
    const defense = Math.floor(stats.defense * randomVariation())
    const speed = Math.floor(stats.speed * randomVariation())

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
    const availableAbilities = catAbilities[rarity]
    const numAbilities = rarity === 'common' ? 2 : rarity === 'rare' ? 3 : rarity === 'epic' ? 4 : 5
    const selectedAbilities = []
    
    for (let i = 0; i < numAbilities; i++) {
      const randomAbility = availableAbilities[Math.floor(Math.random() * availableAbilities.length)]
      if (!selectedAbilities.includes(randomAbility)) {
        selectedAbilities.push(randomAbility)
      }
    }

    return {
      id: `cat-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      name: catNames[Math.floor(Math.random() * catNames.length)],
      level: 1,
      health,
      maxHealth: health,
      attack,
      defense,
      speed,
      experience: 0,
      maxExperience: 100,
      abilities: selectedAbilities,
      description: catDescriptions[Math.floor(Math.random() * catDescriptions.length)],
      rarity,
      image: catEmojis[Math.floor(Math.random() * catEmojis.length)]
    }
  }

  const [isCreating, setIsCreating] = useState(false)

  const handleCreateNewCat = () => {
    setIsCreating(true)
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –∫–æ—Å–º–æ—Å–µ
    setTimeout(() => {
      const newCat = generateRandomCat()
      setCats(prev => [...prev, newCat])
      setIsCreating(false)
    }, 1500)
  }

  const handleDeleteCat = (catId: string) => {
    if (cats.length > 1) { // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ç–∞
      setCats(prev => prev.filter(cat => cat.id !== catId))
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  const getCollectionStats = () => {
    const rarityCount = cats.reduce((acc, cat) => {
      acc[cat.rarity] = (acc[cat.rarity] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    const totalPower = cats.reduce((sum, cat) => sum + cat.attack + cat.defense + cat.speed, 0)
    
    return { rarityCount, totalPower }
  }

  const { rarityCount, totalPower } = getCollectionStats()

  return (
    <div className="p-4 space-y-6">
      <div className="text-center space-y-2">
        <h1 className="text-2xl font-bold text-white flex items-center justify-center gap-2">
          <Icon name="Cat" size={28} />
          –ë–æ–µ–≤—ã–µ –ö–æ—Ç—ã
        </h1>
        <p className="text-white/70">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ–π –∞—Ä–º–∏–µ–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∫–æ—Ç–æ–≤-–≤–æ–∏–Ω–æ–≤</p>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ */}
      <div className="bg-space-dark/40 border border-cosmic-purple/40 rounded-lg p-4">
        <h3 className="text-white font-semibold mb-3 flex items-center gap-2">
          <Icon name="BarChart3" size={18} />
          –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        </h3>
        
        <div className="grid grid-cols-2 gap-4 mb-3">
          <div className="text-center">
            <div className="text-2xl font-bold text-white">{cats.length}</div>
            <div className="text-xs text-white/60">–í—Å–µ–≥–æ –∫–æ—Ç–æ–≤</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-cosmic-cyan">{totalPower}</div>
            <div className="text-xs text-white/60">–û–±—â–∞—è –º–æ—â—å</div>
          </div>
        </div>

        <div className="grid grid-cols-4 gap-2 text-xs">
          <div className="text-center p-2 bg-gray-500/20 rounded">
            <div className="font-semibold text-gray-400">{rarityCount.common || 0}</div>
            <div className="text-gray-500">–û–±—ã—á–Ω—ã—Ö</div>
          </div>
          <div className="text-center p-2 bg-blue-500/20 rounded">
            <div className="font-semibold text-blue-400">{rarityCount.rare || 0}</div>
            <div className="text-blue-500">–†–µ–¥–∫–∏—Ö</div>
          </div>
          <div className="text-center p-2 bg-purple-500/20 rounded">
            <div className="font-semibold text-purple-400">{rarityCount.epic || 0}</div>
            <div className="text-purple-500">–≠–ø–∏—á–µ—Å–∫–∏—Ö</div>
          </div>
          <div className="text-center p-2 bg-yellow-500/20 rounded">
            <div className="font-semibold text-yellow-400">{rarityCount.legendary || 0}</div>
            <div className="text-yellow-500">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö</div>
          </div>
        </div>
      </div>

      <div className="grid gap-4">
        {cats.map(cat => (
          <div key={cat.id} className={`bg-space-dark/60 backdrop-blur-lg border-2 rounded-lg p-4 ${getRarityColor(cat.rarity)}`}>
            <div className="flex items-start gap-4">
              <div className="text-4xl">{cat.image}</div>
              
              <div className="flex-1 space-y-3">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-bold text-white">{cat.name}</h3>
                    <p className={`text-sm ${getRarityColor(cat.rarity).split(' ')[0]}`}>
                      {getRarityName(cat.rarity)} ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å {cat.level}
                    </p>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="text-right">
                      <div className="text-sm text-white/70">–û–ø—ã—Ç</div>
                      <div className="text-white font-semibold">{cat.experience}/{cat.maxExperience}</div>
                    </div>
                    {cats.length > 1 && cat.id !== 'default-cat' && (
                      <button
                        onClick={() => handleDeleteCat(cat.id)}
                        className="text-red-400 hover:text-red-300 p-1 transition-colors"
                        title="–£–¥–∞–ª–∏—Ç—å –∫–æ—Ç–∞"
                      >
                        <Icon name="Trash2" size={16} />
                      </button>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <Icon name="Heart" size={14} className="text-red-400" />
                      <span className="text-white/70">–ó–¥–æ—Ä–æ–≤—å–µ:</span>
                      <span className="text-white font-semibold">{cat.health}/{cat.maxHealth}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Icon name="Sword" size={14} className="text-orange-400" />
                      <span className="text-white/70">–ê—Ç–∞–∫–∞:</span>
                      <span className="text-white font-semibold">{cat.attack}</span>
                    </div>
                  </div>
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <Icon name="Shield" size={14} className="text-blue-400" />
                      <span className="text-white/70">–ó–∞—â–∏—Ç–∞:</span>
                      <span className="text-white font-semibold">{cat.defense}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Icon name="Zap" size={14} className="text-yellow-400" />
                      <span className="text-white/70">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                      <span className="text-white font-semibold">{cat.speed}</span>
                    </div>
                  </div>
                </div>

                <div className="bg-space-dark/40 rounded p-3 space-y-2">
                  <h4 className="text-white font-semibold text-sm flex items-center gap-1">
                    <Icon name="Star" size={14} />
                    –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:
                  </h4>
                  <ul className="space-y-1">
                    {cat.abilities.map((ability, index) => (
                      <li key={index} className="text-xs text-white/80 flex items-start gap-1">
                        <span className="text-cosmic-cyan">‚Ä¢</span>
                        {ability}
                      </li>
                    ))}
                  </ul>
                </div>

                <p className="text-xs text-white/60 italic">{cat.description}</p>

                <div className="flex gap-2 pt-2">
                  <button className="flex-1 bg-cosmic-purple/30 hover:bg-cosmic-purple/50 text-white py-2 px-3 rounded text-sm font-semibold transition-all">
                    –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                  <button className="flex-1 bg-cosmic-cyan/30 hover:bg-cosmic-cyan/50 text-white py-2 px-3 rounded text-sm font-semibold transition-all">
                    –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="bg-space-dark/40 border border-cosmic-purple/40 rounded-lg p-4 text-center">
        {isCreating ? (
          <>
            <div className="animate-spin rounded-full h-6 w-6 border-2 border-cosmic-cyan border-t-transparent mx-auto mb-2"></div>
            <h3 className="text-white font-semibold mb-1">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–ª–∞–∫—Ç–∏–∫–∏...</h3>
            <p className="text-white/60 text-sm">–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–æ—Ç–æ–≤-–≤–æ–∏–Ω–æ–≤</p>
          </>
        ) : (
          <>
            <Icon name="Plus" size={24} className="text-white/50 mx-auto mb-2" />
            <h3 className="text-white font-semibold mb-1">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞</h3>
            <p className="text-white/60 text-sm mb-3">–ù–∞–π–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö –∫–æ—Ç–æ–≤-–≤–æ–∏–Ω–æ–≤ –≤ –≥–∞–ª–∞–∫—Ç–∏–∫–µ</p>
            <button 
              onClick={handleCreateNewCat}
              className="bg-gradient-to-r from-cosmic-purple to-cosmic-cyan text-white py-2 px-4 rounded font-semibold hover:shadow-lg hover:shadow-cosmic-purple/50 transition-all hover:scale-105"
            >
              –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–æ—Å–º–æ—Å
            </button>
          </>
        )}
      </div>
    </div>
  )
}

export default CatsSection