import React, { useState } from 'react'
import Icon from '@/components/ui/icon'

interface Equipment {
  id: string
  name: string
  type: 'weapon' | 'armor' | 'accessory'
  rarity: 'common' | 'rare' | 'epic' | 'legendary'
  level: number
  bonuses: {
    attack?: number
    defense?: number
    speed?: number
    health?: number
  }
  description: string
  icon: string
}

interface CraftingMaterial {
  id: string
  name: string
  icon: string
  rarity: 'common' | 'rare' | 'epic' | 'legendary'
  description: string
}

interface UpgradeRecipe {
  materialsCost: { materialId: string; amount: number }[]
  goldCost: number
  successRate: number
}

interface BattleCat {
  id: string
  name: string
  level: number
  health: number
  maxHealth: number
  attack: number
  defense: number
  speed: number
  experience: number
  maxExperience: number
  abilities: string[]
  description: string
  rarity: 'common' | 'rare' | 'epic' | 'legendary'
  image: string
  equipment: {
    weapon?: Equipment
    armor?: Equipment
    accessory?: Equipment
  }
}

const CatsSection: React.FC = () => {
  const [cats, setCats] = useState<BattleCat[]>([
    {
      id: 'default-cat',
      name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –í–æ–∏–Ω',
      level: 1,
      health: 100,
      maxHealth: 100,
      attack: 15,
      defense: 8,
      speed: 12,
      experience: 0,
      maxExperience: 100,
      abilities: [
        '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—Ä—ã–∂–æ–∫ - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –≤—Ä–∞–≥—É',
        '–ó–≤–µ–∑–¥–Ω–∞—è –∞—Ç–∞–∫–∞ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø–æ –ø–ª–æ—â–∞–¥–∏',
        '–ó–∞—â–∏—Ç–Ω–æ–µ –ø–æ–ª–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –Ω–∞ 50%'
      ],
      description: '–•—Ä–∞–±—Ä—ã–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ç, –∑–∞—â–∏—Ç–Ω–∏–∫ –≥–∞–ª–∞–∫—Ç–∏–∫–∏. –û–±–ª–∞–¥–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –ª–æ–≤–∫–æ—Å—Ç—å—é –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é –≤ –±–æ—é.',
      rarity: 'common',
      image: 'üê±‚ÄçüöÄ',
      equipment: {}
    }
  ])

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'common': return 'text-gray-400 border-gray-500'
      case 'rare': return 'text-blue-400 border-blue-500'
      case 'epic': return 'text-purple-400 border-purple-500'
      case 'legendary': return 'text-yellow-400 border-yellow-500'
      default: return 'text-gray-400 border-gray-500'
    }
  }

  const getRarityName = (rarity: string) => {
    switch (rarity) {
      case 'common': return '–û–±—ã—á–Ω—ã–π'
      case 'rare': return '–†–µ–¥–∫–∏–π'
      case 'epic': return '–≠–ø–∏—á–µ—Å–∫–∏–π'
      case 'legendary': return '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
      default: return '–û–±—ã—á–Ω—ã–π'
    }
  }

  // –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ç–æ–≤
  const catNames = [
    '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –°—Ç—Ä–∞–∂', '–ó–≤–µ–∑–¥–Ω—ã–π –û—Ö–æ—Ç–Ω–∏–∫', '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –í–æ–∏–Ω', '–ù–µ–±–µ—Å–Ω—ã–π –ó–∞—â–∏—Ç–Ω–∏–∫',
    '–õ—É–Ω–Ω—ã–π –†—ã—Ü–∞—Ä—å', '–°–æ–ª–Ω–µ—á–Ω—ã–π –ë–æ–µ—Ü', '–ö–æ–º–µ—Ç–Ω—ã–π –ê—Å', '–ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π –•–∏—â–Ω–∏–∫',
    '–ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–π –ì–µ—Ä–æ–π', '–ú–µ–∂–∑–≤–µ–∑–¥–Ω—ã–π –ö–∞–ø–∏—Ç–∞–Ω', '–û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π –°–Ω–∞–π–ø–µ—Ä', '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ù–∏–Ω–¥–∑—è',
    '–ó–≤–µ–∑–¥–æ–ª–µ—Ç–Ω—ã–π –ü–∏–ª–æ—Ç', '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ö–æ–º–∞–Ω–¥–∏—Ä', '–¢—É–º–∞–Ω–Ω—ã–π –ü—Ä–∏–∑—Ä–∞–∫', '–ß–µ—Ä–Ω–∞—è –î—ã—Ä–∞'
  ]

  const catAbilities = {
    common: [
      '–ë—ã—Å—Ç—Ä—ã–π —É–¥–∞—Ä - –Ω–∞–Ω–æ—Å–∏—Ç –æ–±—ã—á–Ω—ã–π —É—Ä–æ–Ω',
      '–ü—Ä—ã–∂–æ–∫ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É–∫–ª–æ–Ω–µ–Ω–∏–µ',
      '–¶–∞—Ä–∞–ø–∏–Ω—ã - –±–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ –∫–æ–≥—Ç—è–º–∏'
    ],
    rare: [
      '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ª–ø - —Å—Ç—Ä–µ–ª—è–µ—Ç –ª—É—á–∞–º–∏',
      '–©–∏—Ç –∑–∞—â–∏—Ç—ã - –±–ª–æ–∫–∏—Ä—É–µ—Ç —É—Ä–æ–Ω',
      '–£—Å–∫–æ—Ä–µ–Ω–∏–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ 30%',
      '–õ–µ—á–µ–Ω–∏–µ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ'
    ],
    epic: [
      '–ü–ª–∞–∑–º–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø–æ –æ–±–ª–∞—Å—Ç–∏',
      '–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è',
      '–í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ - –∑–∞–º–µ–¥–ª—è–µ—Ç –≤—Ä–∞–≥–æ–≤',
      '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä - –æ—Ç—Ä–∞–∂–∞–µ—Ç –∞—Ç–∞–∫–∏'
    ],
    legendary: [
      '–ó–≤–µ–∑–¥–Ω–∞—è –±—É—Ä—è - –æ–ø—É—Å—Ç–æ—à–∏—Ç–µ–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞',
      '–ö–≤–∞–Ω—Ç–æ–≤—ã–π –ø—Ä—ã–∂–æ–∫ - –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã',
      '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≥–æ—Å–ø–æ–¥—Å—Ç–≤–æ - —É–¥–≤–∞–∏–≤–∞–µ—Ç –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
      '–ß–µ—Ä–Ω–∞—è –¥—ã—Ä–∞ - –∑–∞—Å–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤'
    ]
  }

  const catDescriptions = [
    '–í–µ—Ç–µ—Ä–∞–Ω –º–Ω–æ–≥–∏—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –≤–æ–π–Ω, –∑–∞–∫–∞–ª–µ–Ω–Ω—ã–π –≤ –±–æ—è—Ö',
    '–ú–æ–ª–æ–¥–æ–π, –Ω–æ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –≤–æ–∏–Ω —Å –±–æ–ª—å—à–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º',
    '–ó–∞–≥–∞–¥–æ—á–Ω—ã–π –∫–æ—Ç –∏–∑ –¥–∞–ª–µ–∫–æ–π –≥–∞–ª–∞–∫—Ç–∏–∫–∏ —Å –¥—Ä–µ–≤–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏',
    '–ë—ã–≤—à–∏–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø–∏—Ä–∞—Ç, –ø–µ—Ä–µ—à–µ–¥—à–∏–π –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É –¥–æ–±—Ä–∞',
    '–≠–ª–∏—Ç–Ω—ã–π –±–æ–µ—Ü —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–∏–ª',
    '–ú—É–¥—Ä—ã–π —Å—Ç—Ä–∞—Ç–µ–≥, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—â–∏–π –¥—É–º–∞—Ç—å, –∞ –ø–æ—Ç–æ–º –¥—Ä–∞—Ç—å—Å—è',
    '–û—Ç–≤–∞–∂–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∏—Ä–æ–≤',
    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–∏–π, —Å–æ–∑–¥–∞—é—â–∏–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ'
  ]

  const catEmojis = ['üê±‚ÄçüöÄ', 'üê±‚Äçüë§', 'ü¶Å', 'üêØ', 'üêÜ', 'üò∏', 'üòº', 'üôÄ']

  const generateRandomCat = (): BattleCat => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å (—á–µ–º —Ä–µ–∂–µ, —Ç–µ–º –º–µ–Ω—å—à–µ —à–∞–Ω—Å)
    const rarityRoll = Math.random()
    let rarity: 'common' | 'rare' | 'epic' | 'legendary'
    
    if (rarityRoll < 0.6) rarity = 'common'
    else if (rarityRoll < 0.85) rarity = 'rare'
    else if (rarityRoll < 0.97) rarity = 'epic'
    else rarity = 'legendary'

    // –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
    const baseStats = {
      common: { health: 80, attack: 10, defense: 5, speed: 8 },
      rare: { health: 120, attack: 18, defense: 12, speed: 15 },
      epic: { health: 180, attack: 28, defense: 20, speed: 22 },
      legendary: { health: 300, attack: 45, defense: 35, speed: 35 }
    }

    const stats = baseStats[rarity]
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ (¬±20%)
    const randomVariation = () => 0.8 + Math.random() * 0.4
    
    const health = Math.floor(stats.health * randomVariation())
    const attack = Math.floor(stats.attack * randomVariation())
    const defense = Math.floor(stats.defense * randomVariation())
    const speed = Math.floor(stats.speed * randomVariation())

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
    const availableAbilities = catAbilities[rarity]
    const numAbilities = rarity === 'common' ? 2 : rarity === 'rare' ? 3 : rarity === 'epic' ? 4 : 5
    const selectedAbilities = []
    
    for (let i = 0; i < numAbilities; i++) {
      const randomAbility = availableAbilities[Math.floor(Math.random() * availableAbilities.length)]
      if (!selectedAbilities.includes(randomAbility)) {
        selectedAbilities.push(randomAbility)
      }
    }

    return {
      id: `cat-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      name: catNames[Math.floor(Math.random() * catNames.length)],
      level: 1,
      health,
      maxHealth: health,
      attack,
      defense,
      speed,
      experience: 0,
      maxExperience: 100,
      abilities: selectedAbilities,
      description: catDescriptions[Math.floor(Math.random() * catDescriptions.length)],
      rarity,
      image: catEmojis[Math.floor(Math.random() * catEmojis.length)],
      equipment: {}
    }
  }

  const [isCreating, setIsCreating] = useState(false)

  const handleCreateNewCat = () => {
    setIsCreating(true)
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –∫–æ—Å–º–æ—Å–µ
    setTimeout(() => {
      const newCat = generateRandomCat()
      setCats(prev => [...prev, newCat])
      setIsCreating(false)
    }, 1500)
  }

  const handleDeleteCat = (catId: string) => {
    if (cats.length > 1) { // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ç–∞
      setCats(prev => prev.filter(cat => cat.id !== catId))
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  const getCollectionStats = () => {
    const rarityCount = cats.reduce((acc, cat) => {
      acc[cat.rarity] = (acc[cat.rarity] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    const totalPower = cats.reduce((sum, cat) => sum + cat.attack + cat.defense + cat.speed, 0)
    
    return { rarityCount, totalPower }
  }

  const { rarityCount, totalPower } = getCollectionStats()
  
  const [isTraining, setIsTraining] = useState<string | null>(null)
  const [levelUpMessage, setLevelUpMessage] = useState<string | null>(null)
  const [expGainMessage, setExpGainMessage] = useState<string | null>(null)
  const [selectedCat, setSelectedCat] = useState<string | null>(null)
  const [showEquipment, setShowEquipment] = useState(false)

  // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  const [inventory, setInventory] = useState<Equipment[]>([
    {
      id: 'laser-sword',
      name: '–õ–∞–∑–µ—Ä–Ω—ã–π –º–µ—á',
      type: 'weapon',
      rarity: 'rare',
      level: 1,
      bonuses: { attack: 8 },
      description: '–°–≤–µ—Ç—è—â–∏–π—Å—è –∫–ª–∏–Ω–æ–∫ –∏–∑ —á–∏—Å—Ç–æ–π —ç–Ω–µ—Ä–≥–∏–∏',
      icon: '‚öîÔ∏è'
    },
    {
      id: 'cosmic-armor',
      name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è',
      type: 'armor',
      rarity: 'epic',
      level: 1,
      bonuses: { defense: 12, health: 25 },
      description: '–ó–∞—â–∏—Ç–Ω—ã–π –∫–æ—Å—Ç—é–º –∏–∑ –∑–≤–µ–∑–¥–Ω–æ–≥–æ –º–µ—Ç–∞–ª–ª–∞',
      icon: 'üõ°Ô∏è'
    },
    {
      id: 'speed-boots',
      name: '–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∞–ø–æ–≥–∏',
      type: 'accessory',
      rarity: 'rare',
      level: 1,
      bonuses: { speed: 10 },
      description: '–£–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è',
      icon: 'üë¢'
    }
  ])

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
  const [showCrafting, setShowCrafting] = useState(false)
  const [materials, setMaterials] = useState<Record<string, number>>({
    'star-fragment': 5,
    'cosmic-ore': 3,
    'energy-crystal': 2,
    'dark-matter': 1
  })
  const [gold, setGold] = useState(1000)
  const [isUpgrading, setIsUpgrading] = useState<string | null>(null)
  const [upgradeResult, setUpgradeResult] = useState<{ success: boolean; message: string } | null>(null)

  // –ë–∞–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
  const craftingMaterials: Record<string, CraftingMaterial> = {
    'star-fragment': {
      id: 'star-fragment',
      name: '–ó–≤–µ–∑–¥–Ω—ã–π –æ—Å–∫–æ–ª–æ–∫',
      icon: '‚≠ê',
      rarity: 'common',
      description: '–û—Å–∫–æ–ª–æ–∫ —É–ø–∞–≤—à–µ–π –∑–≤–µ–∑–¥—ã'
    },
    'cosmic-ore': {
      id: 'cosmic-ore', 
      name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Ä—É–¥–∞',
      icon: 'ü™®',
      rarity: 'rare',
      description: '–†–µ–¥–∫–∏–π –º–µ—Ç–∞–ª–ª –∏–∑ –≥–ª—É–±–∏–Ω –∫–æ—Å–º–æ—Å–∞'
    },
    'energy-crystal': {
      id: 'energy-crystal',
      name: '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª',
      icon: 'üíé',
      rarity: 'epic', 
      description: '–ö—Ä–∏—Å—Ç–∞–ª–ª, –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π —ç–Ω–µ—Ä–≥–∏–µ–π'
    },
    'dark-matter': {
      id: 'dark-matter',
      name: '–¢–µ–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è',
      icon: 'üåë',
      rarity: 'legendary',
      description: '–ó–∞–≥–∞–¥–æ—á–Ω–∞—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π'
    }
  }

  // –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  const equipmentData = {
    weapon: {
      names: ['–ü–ª–∞–∑–º–µ–Ω–Ω—ã–π –±–ª–∞—Å—Ç–µ—Ä', '–ö–≤–∞–Ω—Ç–æ–≤–∞—è –∫–∞—Ç–∞–Ω–∞', '–ó–≤–µ–∑–¥–Ω—ã–π –ø–æ—Å–æ—Ö', '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –º–æ–ª–æ—Ç', '–ù–µ–π—Ç—Ä–æ–Ω–Ω–∞—è –ø—É—à–∫–∞'],
      icons: ['üî´', '‚öîÔ∏è', 'ü™Ñ', 'üî®', 'üí•'],
      bonuses: (rarity: string) => ({
        common: { attack: 3 + Math.floor(Math.random() * 3) },
        rare: { attack: 6 + Math.floor(Math.random() * 5) },
        epic: { attack: 12 + Math.floor(Math.random() * 8) },
        legendary: { attack: 20 + Math.floor(Math.random() * 15) }
      }[rarity])
    },
    armor: {
      names: ['–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —â–∏—Ç', '–ù–∞–Ω–æ–∫–æ—Å—Ç—é–º', '–ü–ª–∞–∑–º–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞', '–ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞–Ω—Ü–∏—Ä—å', '–ö–≤–∞–Ω—Ç–æ–≤–∞—è –æ–±–æ–ª–æ—á–∫–∞'],
      icons: ['üõ°Ô∏è', 'ü•ã', 'ü¶∫', '‚öîÔ∏è', 'üîÆ'],
      bonuses: (rarity: string) => ({
        common: { defense: 2 + Math.floor(Math.random() * 2), health: 10 + Math.floor(Math.random() * 10) },
        rare: { defense: 5 + Math.floor(Math.random() * 4), health: 20 + Math.floor(Math.random() * 15) },
        epic: { defense: 10 + Math.floor(Math.random() * 6), health: 35 + Math.floor(Math.random() * 25) },
        legendary: { defense: 18 + Math.floor(Math.random() * 12), health: 60 + Math.floor(Math.random() * 40) }
      }[rarity])
    },
    accessory: {
      names: ['–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –æ—á–∫–∏', '–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏', '–¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä', '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª—å—Ü–æ', '–í—Ä–µ–º–µ–Ω–Ω–æ–π –±—Ä–∞—Å–ª–µ—Ç'],
      icons: ['üï∂Ô∏è', 'üß§', '‚ö°', 'üíç', '‚åö'],
      bonuses: (rarity: string) => ({
        common: { speed: 2 + Math.floor(Math.random() * 3) },
        rare: { speed: 5 + Math.floor(Math.random() * 5), attack: 2 },
        epic: { speed: 10 + Math.floor(Math.random() * 8), attack: 5, defense: 3 },
        legendary: { speed: 18 + Math.floor(Math.random() * 12), attack: 10, defense: 8, health: 20 }
      }[rarity])
    }
  }

  const generateRandomEquipment = (): Equipment => {
    const types = ['weapon', 'armor', 'accessory'] as const
    const type = types[Math.floor(Math.random() * types.length)]
    
    const rarityRoll = Math.random()
    let rarity: 'common' | 'rare' | 'epic' | 'legendary'
    
    if (rarityRoll < 0.5) rarity = 'common'
    else if (rarityRoll < 0.8) rarity = 'rare'
    else if (rarityRoll < 0.95) rarity = 'epic'
    else rarity = 'legendary'

    const data = equipmentData[type]
    const name = data.names[Math.floor(Math.random() * data.names.length)]
    const icon = data.icons[Math.floor(Math.random() * data.icons.length)]
    const bonuses = data.bonuses(rarity)

    return {
      id: `${type}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      name,
      type,
      rarity,
      level: 1,
      bonuses,
      description: `${rarity === 'legendary' ? '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π' : rarity === 'epic' ? '–≠–ø–∏—á–µ—Å–∫–∏–π' : rarity === 'rare' ? '–†–µ–¥–∫–∏–π' : '–û–±—ã—á–Ω—ã–π'} –ø—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏`,
      icon
    }
  }

  const handleTrainCat = (catId: string) => {
    setIsTraining(catId)
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    setTimeout(() => {
      setCats(prev => prev.map(cat => {
        if (cat.id === catId) {
          const expGain = 25 + Math.floor(Math.random() * 25) // 25-50 –æ–ø—ã—Ç–∞
          const newExperience = cat.experience + expGain
          const isLevelUp = newExperience >= cat.maxExperience
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—ã—Ç–∞
          if (!isLevelUp) {
            setExpGainMessage(`${cat.name} –ø–æ–ª—É—á–∏–ª ${expGain} –æ–ø—ã—Ç–∞! üìà`)
            setTimeout(() => setExpGainMessage(null), 2000)
          }
          
          if (isLevelUp) {
            // –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å —É–ª—É—á—à–µ–Ω–∏–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            const healthBonus = Math.floor(cat.maxHealth * 0.15) // +15% –∫ –∑–¥–æ—Ä–æ–≤—å—é
            const attackBonus = Math.floor(cat.attack * 0.12) // +12% –∫ –∞—Ç–∞–∫–µ
            const defenseBonus = Math.floor(cat.defense * 0.1) // +10% –∫ –∑–∞—â–∏—Ç–µ
            const speedBonus = Math.floor(cat.speed * 0.08) // +8% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏
            
            const newMaxHealth = cat.maxHealth + healthBonus
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
            setLevelUpMessage(`${cat.name} –¥–æ—Å—Ç–∏–≥ ${cat.level + 1} —É—Ä–æ–≤–Ω—è! ‚≠ê`)
            setTimeout(() => setLevelUpMessage(null), 3000)
            
            return {
              ...cat,
              level: cat.level + 1,
              experience: newExperience - cat.maxExperience,
              maxExperience: Math.floor(cat.maxExperience * 1.3), // +30% –∫ —Ç—Ä–µ–±—É–µ–º–æ–º—É –æ–ø—ã—Ç—É
              health: newMaxHealth, // –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
              maxHealth: newMaxHealth,
              attack: cat.attack + attackBonus,
              defense: cat.defense + defenseBonus,
              speed: cat.speed + speedBonus
            }
          } else {
            // –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
            return {
              ...cat,
              experience: newExperience
            }
          }
        }
        return cat
      }))
      setIsTraining(null)
    }, 2000)
  }

  const handleEquipItem = (catId: string, equipment: Equipment) => {
    setCats(prev => prev.map(cat => {
      if (cat.id === catId) {
        const newEquipment = { ...cat.equipment }
        newEquipment[equipment.type] = equipment
        
        return {
          ...cat,
          equipment: newEquipment
        }
      }
      return cat
    }))
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    setInventory(prev => prev.filter(item => item.id !== equipment.id))
    setShowEquipment(false)
  }

  const handleUnequipItem = (catId: string, type: 'weapon' | 'armor' | 'accessory') => {
    const cat = cats.find(c => c.id === catId)
    const equipment = cat?.equipment[type]
    
    if (equipment) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      setInventory(prev => [...prev, equipment])
      
      // –£–±–∏—Ä–∞–µ–º —Å –∫–æ—Ç–∞
      setCats(prev => prev.map(c => {
        if (c.id === catId) {
          const newEquipment = { ...c.equipment }
          delete newEquipment[type]
          return { ...c, equipment: newEquipment }
        }
        return c
      }))
    }
  }

  const handleFindEquipment = () => {
    const newEquipment = generateRandomEquipment()
    setInventory(prev => [...prev, newEquipment])
  }

  const calculateTotalStats = (cat: BattleCat) => {
    let totalAttack = cat.attack
    let totalDefense = cat.defense
    let totalSpeed = cat.speed
    let totalHealth = cat.maxHealth

    Object.values(cat.equipment).forEach(equipment => {
      if (equipment) {
        totalAttack += equipment.bonuses.attack || 0
        totalDefense += equipment.bonuses.defense || 0
        totalSpeed += equipment.bonuses.speed || 0
        totalHealth += equipment.bonuses.health || 0
      }
    })

    return { totalAttack, totalDefense, totalSpeed, totalHealth }
  }

  // –§—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∞—Ñ—Ç–∞
  const getUpgradeRecipe = (equipment: Equipment): UpgradeRecipe => {
    const baseLevel = equipment.level || 1
    const rarityMultiplier = {
      common: 1,
      rare: 1.5, 
      epic: 2,
      legendary: 3
    }[equipment.rarity] || 1

    return {
      materialsCost: [
        { materialId: 'star-fragment', amount: Math.ceil(baseLevel * 2 * rarityMultiplier) },
        { materialId: 'cosmic-ore', amount: Math.ceil(baseLevel * 1 * rarityMultiplier) }
      ],
      goldCost: Math.ceil(baseLevel * 100 * rarityMultiplier),
      successRate: Math.max(40, 95 - baseLevel * 5 - (rarityMultiplier - 1) * 10)
    }
  }

  const handleUpgradeEquipment = async (equipmentId: string) => {
    const equipment = inventory.find(item => item.id === equipmentId)
    if (!equipment) return

    const recipe = getUpgradeRecipe(equipment)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    for (const cost of recipe.materialsCost) {
      if ((materials[cost.materialId] || 0) < cost.amount) {
        setUpgradeResult({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!' })
        setTimeout(() => setUpgradeResult(null), 3000)
        return
      }
    }

    if (gold < recipe.goldCost) {
      setUpgradeResult({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!' })
      setTimeout(() => setUpgradeResult(null), 3000)
      return
    }

    setIsUpgrading(equipmentId)

    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–ª—É—á—à–µ–Ω–∏—è
    setTimeout(() => {
      const success = Math.random() * 100 < recipe.successRate

      if (success) {
        // –°–Ω–∏–º–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–æ–ª–æ—Ç–æ
        setMaterials(prev => {
          const newMaterials = { ...prev }
          recipe.materialsCost.forEach(cost => {
            newMaterials[cost.materialId] = (newMaterials[cost.materialId] || 0) - cost.amount
          })
          return newMaterials
        })
        setGold(prev => prev - recipe.goldCost)

        // –£–ª—É—á—à–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
        setInventory(prev => prev.map(item => {
          if (item.id === equipmentId) {
            const newLevel = (item.level || 1) + 1
            const bonusMultiplier = 1.2
            
            return {
              ...item,
              level: newLevel,
              name: `${item.name} +${newLevel}`,
              bonuses: Object.fromEntries(
                Object.entries(item.bonuses).map(([key, value]) => [
                  key, 
                  Math.ceil((value || 0) * bonusMultiplier)
                ])
              )
            }
          }
          return item
        }))

        setUpgradeResult({ success: true, message: '–£–ª—É—á—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!' })
      } else {
        // –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ —Ç–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–≤–∏–Ω—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        setMaterials(prev => {
          const newMaterials = { ...prev }
          recipe.materialsCost.forEach(cost => {
            newMaterials[cost.materialId] = (newMaterials[cost.materialId] || 0) - Math.ceil(cost.amount / 2)
          })
          return newMaterials
        })
        
        setUpgradeResult({ success: false, message: '–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å!' })
      }

      setIsUpgrading(null)
      setTimeout(() => setUpgradeResult(null), 3000)
    }, 2000)
  }

  const handleGatherMaterials = () => {
    // –°–ª—É—á–∞–π–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    const possibleMaterials = Object.keys(craftingMaterials)
    const foundMaterial = possibleMaterials[Math.floor(Math.random() * possibleMaterials.length)]
    const amount = Math.floor(Math.random() * 3) + 1

    setMaterials(prev => ({
      ...prev,
      [foundMaterial]: (prev[foundMaterial] || 0) + amount
    }))

    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –∑–æ–ª–æ—Ç–∞
    const goldGain = Math.floor(Math.random() * 100) + 50
    setGold(prev => prev + goldGain)
  }

  return (
    <div className="p-4 space-y-6">
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {levelUpMessage && (
        <div className="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 bg-gradient-to-r from-cosmic-purple to-cosmic-cyan text-white py-3 px-6 rounded-full shadow-lg animate-bounce">
          <div className="flex items-center gap-2">
            <Icon name="Star" size={20} />
            {levelUpMessage}
          </div>
        </div>
      )}
      
      {expGainMessage && (
        <div className="fixed top-16 left-1/2 transform -translate-x-1/2 z-50 bg-green-600/90 text-white py-2 px-4 rounded-lg shadow-lg">
          <div className="flex items-center gap-2">
            <Icon name="TrendingUp" size={16} />
            {expGainMessage}
          </div>
        </div>
      )}
      <div className="text-center space-y-2">
        <h1 className="text-2xl font-bold text-white flex items-center justify-center gap-2">
          <Icon name="Cat" size={28} />
          –ë–æ–µ–≤—ã–µ –ö–æ—Ç—ã
        </h1>
        <p className="text-white/70">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ–π –∞—Ä–º–∏–µ–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∫–æ—Ç–æ–≤-–≤–æ–∏–Ω–æ–≤</p>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ */}
      <div className="bg-space-dark/40 border border-cosmic-purple/40 rounded-lg p-4">
        <h3 className="text-white font-semibold mb-3 flex items-center gap-2">
          <Icon name="BarChart3" size={18} />
          –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        </h3>
        
        <div className="grid grid-cols-2 gap-4 mb-3">
          <div className="text-center">
            <div className="text-2xl font-bold text-white">{cats.length}</div>
            <div className="text-xs text-white/60">–í—Å–µ–≥–æ –∫–æ—Ç–æ–≤</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-cosmic-cyan">{totalPower}</div>
            <div className="text-xs text-white/60">–û–±—â–∞—è –º–æ—â—å</div>
          </div>
        </div>

        <div className="grid grid-cols-4 gap-2 text-xs">
          <div className="text-center p-2 bg-gray-500/20 rounded">
            <div className="font-semibold text-gray-400">{rarityCount.common || 0}</div>
            <div className="text-gray-500">–û–±—ã—á–Ω—ã—Ö</div>
          </div>
          <div className="text-center p-2 bg-blue-500/20 rounded">
            <div className="font-semibold text-blue-400">{rarityCount.rare || 0}</div>
            <div className="text-blue-500">–†–µ–¥–∫–∏—Ö</div>
          </div>
          <div className="text-center p-2 bg-purple-500/20 rounded">
            <div className="font-semibold text-purple-400">{rarityCount.epic || 0}</div>
            <div className="text-purple-500">–≠–ø–∏—á–µ—Å–∫–∏—Ö</div>
          </div>
          <div className="text-center p-2 bg-yellow-500/20 rounded">
            <div className="font-semibold text-yellow-400">{rarityCount.legendary || 0}</div>
            <div className="text-yellow-500">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö</div>
          </div>
        </div>
      </div>

      <div className="grid gap-4">
        {cats.map(cat => (
          <div key={cat.id} className={`bg-space-dark/60 backdrop-blur-lg border-2 rounded-lg p-4 ${getRarityColor(cat.rarity)}`}>
            <div className="flex items-start gap-4">
              <div className="text-4xl">{cat.image}</div>
              
              <div className="flex-1 space-y-3">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-bold text-white">{cat.name}</h3>
                    <p className={`text-sm ${getRarityColor(cat.rarity).split(' ')[0]}`}>
                      {getRarityName(cat.rarity)} ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å {cat.level}
                    </p>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="text-right min-w-[80px]">
                      <div className="text-sm text-white/70">–û–ø—ã—Ç</div>
                      <div className="text-white font-semibold">{cat.experience}/{cat.maxExperience}</div>
                      <div className="w-full bg-gray-700 rounded-full h-1.5 mt-1">
                        <div 
                          className="bg-gradient-to-r from-cosmic-purple to-cosmic-cyan h-1.5 rounded-full transition-all duration-300"
                          style={{ width: `${(cat.experience / cat.maxExperience) * 100}%` }}
                        ></div>
                      </div>
                    </div>
                    {cats.length > 1 && cat.id !== 'default-cat' && (
                      <button
                        onClick={() => handleDeleteCat(cat.id)}
                        className="text-red-400 hover:text-red-300 p-1 transition-colors"
                        title="–£–¥–∞–ª–∏—Ç—å –∫–æ—Ç–∞"
                      >
                        <Icon name="Trash2" size={16} />
                      </button>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <Icon name="Heart" size={14} className="text-red-400" />
                      <span className="text-white/70">–ó–¥–æ—Ä–æ–≤—å–µ:</span>
                      <span className="text-white font-semibold">
                        {cat.health}/{calculateTotalStats(cat).totalHealth}
                        {calculateTotalStats(cat).totalHealth > cat.maxHealth && (
                          <span className="text-green-400 text-xs"> (+{calculateTotalStats(cat).totalHealth - cat.maxHealth})</span>
                        )}
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Icon name="Sword" size={14} className="text-orange-400" />
                      <span className="text-white/70">–ê—Ç–∞–∫–∞:</span>
                      <span className="text-white font-semibold">
                        {calculateTotalStats(cat).totalAttack}
                        {calculateTotalStats(cat).totalAttack > cat.attack && (
                          <span className="text-green-400 text-xs"> (+{calculateTotalStats(cat).totalAttack - cat.attack})</span>
                        )}
                      </span>
                    </div>
                  </div>
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <Icon name="Shield" size={14} className="text-blue-400" />
                      <span className="text-white/70">–ó–∞—â–∏—Ç–∞:</span>
                      <span className="text-white font-semibold">
                        {calculateTotalStats(cat).totalDefense}
                        {calculateTotalStats(cat).totalDefense > cat.defense && (
                          <span className="text-green-400 text-xs"> (+{calculateTotalStats(cat).totalDefense - cat.defense})</span>
                        )}
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Icon name="Zap" size={14} className="text-yellow-400" />
                      <span className="text-white/70">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                      <span className="text-white font-semibold">
                        {calculateTotalStats(cat).totalSpeed}
                        {calculateTotalStats(cat).totalSpeed > cat.speed && (
                          <span className="text-green-400 text-xs"> (+{calculateTotalStats(cat).totalSpeed - cat.speed})</span>
                        )}
                      </span>
                    </div>
                  </div>
                </div>

                {/* –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ */}
                <div className="bg-space-dark/40 rounded p-3 space-y-2">
                  <h4 className="text-white font-semibold text-sm flex items-center gap-1">
                    <Icon name="Package" size={14} />
                    –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞:
                  </h4>
                  <div className="grid grid-cols-3 gap-2">
                    {(['weapon', 'armor', 'accessory'] as const).map(type => {
                      const equipment = cat.equipment[type]
                      const typeNames = { weapon: '–û—Ä—É–∂–∏–µ', armor: '–ë—Ä–æ–Ω—è', accessory: '–ê–∫—Å–µ—Å—Å—É–∞—Ä' }
                      
                      return (
                        <div key={type} className="text-center">
                          <div className="text-xs text-white/60 mb-1">{typeNames[type]}</div>
                          {equipment ? (
                            <button
                              onClick={() => handleUnequipItem(cat.id, type)}
                              className="w-full p-2 bg-cosmic-purple/30 rounded border border-cosmic-purple/50 hover:bg-cosmic-purple/50 transition-all"
                              title={`${equipment.name}: ${Object.entries(equipment.bonuses).map(([key, value]) => `+${value} ${key}`).join(', ')}`}
                            >
                              <div className="text-lg">{equipment.icon}</div>
                              <div className="text-xs text-white/80 truncate">{equipment.name}</div>
                            </button>
                          ) : (
                            <div className="w-full p-2 bg-gray-600/30 rounded border border-gray-500/50">
                              <div className="text-lg text-gray-500">‚ö™</div>
                              <div className="text-xs text-gray-500">–ü—É—Å—Ç–æ</div>
                            </div>
                          )}
                        </div>
                      )
                    })}
                  </div>
                </div>

                <div className="bg-space-dark/40 rounded p-3 space-y-2">
                  <h4 className="text-white font-semibold text-sm flex items-center gap-1">
                    <Icon name="Star" size={14} />
                    –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:
                  </h4>
                  <ul className="space-y-1">
                    {cat.abilities.map((ability, index) => (
                      <li key={index} className="text-xs text-white/80 flex items-start gap-1">
                        <span className="text-cosmic-cyan">‚Ä¢</span>
                        {ability}
                      </li>
                    ))}
                  </ul>
                </div>

                <p className="text-xs text-white/60 italic">{cat.description}</p>

                <div className="flex gap-2 pt-2">
                  <button 
                    onClick={() => handleTrainCat(cat.id)}
                    disabled={isTraining === cat.id}
                    className="flex-1 bg-cosmic-purple/30 hover:bg-cosmic-purple/50 disabled:bg-cosmic-purple/20 disabled:cursor-not-allowed text-white py-2 px-3 rounded text-sm font-semibold transition-all flex items-center justify-center gap-1"
                  >
                    {isTraining === cat.id ? (
                      <>
                        <div className="animate-spin rounded-full h-3 w-3 border border-white border-t-transparent"></div>
                        –¢—Ä–µ–Ω–∏—Ä—É–µ—Ç—Å—è...
                      </>
                    ) : (
                      <>
                        <Icon name="Dumbbell" size={14} />
                        –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å
                      </>
                    )}
                  </button>
                  <button 
                    onClick={() => {
                      setSelectedCat(cat.id)
                      setShowEquipment(true)
                    }}
                    className="flex-1 bg-cosmic-cyan/30 hover:bg-cosmic-cyan/50 text-white py-2 px-3 rounded text-sm font-semibold transition-all flex items-center justify-center gap-1"
                  >
                    <Icon name="Package" size={14} />
                    –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="bg-space-dark/40 border border-cosmic-purple/40 rounded-lg p-4 text-center">
        {isCreating ? (
          <>
            <div className="animate-spin rounded-full h-6 w-6 border-2 border-cosmic-cyan border-t-transparent mx-auto mb-2"></div>
            <h3 className="text-white font-semibold mb-1">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞–ª–∞–∫—Ç–∏–∫–∏...</h3>
            <p className="text-white/60 text-sm">–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–æ—Ç–æ–≤-–≤–æ–∏–Ω–æ–≤</p>
          </>
        ) : (
          <>
            <Icon name="Plus" size={24} className="text-white/50 mx-auto mb-2" />
            <h3 className="text-white font-semibold mb-1">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞</h3>
            <p className="text-white/60 text-sm mb-3">–ù–∞–π–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö –∫–æ—Ç–æ–≤-–≤–æ–∏–Ω–æ–≤ –≤ –≥–∞–ª–∞–∫—Ç–∏–∫–µ</p>
            <button 
              onClick={handleCreateNewCat}
              className="bg-gradient-to-r from-cosmic-purple to-cosmic-cyan text-white py-2 px-4 rounded font-semibold hover:shadow-lg hover:shadow-cosmic-purple/50 transition-all hover:scale-105"
            >
              –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–æ—Å–º–æ—Å
            </button>
          </>
        )}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ */}
      <div className="bg-space-dark/40 border border-cosmic-cyan/40 rounded-lg p-4 text-center">
        <Icon name="Search" size={24} className="text-white/50 mx-auto mb-2" />
        <h3 className="text-white font-semibold mb-1">–ù–∞–π—Ç–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É</h3>
        <p className="text-white/60 text-sm mb-3">–û–±—ã—â–∏—Ç–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ä—É–∏–Ω—ã</p>
        <button 
          onClick={handleFindEquipment}
          className="bg-gradient-to-r from-cosmic-cyan to-blue-500 text-white py-2 px-4 rounded font-semibold hover:shadow-lg hover:shadow-cosmic-cyan/50 transition-all hover:scale-105"
        >
          –ò—Å–∫–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
        </button>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π */}
      <div className="bg-space-dark/40 border border-yellow-500/40 rounded-lg p-4 text-center">
        <Icon name="Hammer" size={24} className="text-white/50 mx-auto mb-2" />
        <h3 className="text-white font-semibold mb-1">–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è</h3>
        <p className="text-white/60 text-sm mb-3">–£–ª—É—á—à–∞–π—Ç–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É</p>
        <button 
          onClick={() => setShowCrafting(true)}
          className="bg-gradient-to-r from-yellow-500 to-orange-500 text-white py-2 px-4 rounded font-semibold hover:shadow-lg hover:shadow-yellow-500/50 transition-all hover:scale-105"
        >
          –û—Ç–∫—Ä—ã—Ç—å –º–∞—Å—Ç–µ—Ä—Å–∫—É—é
        </button>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ */}
      <div className="bg-space-dark/40 border border-green-500/40 rounded-lg p-4 text-center">
        <Icon name="Pickaxe" size={24} className="text-white/50 mx-auto mb-2" />
        <h3 className="text-white font-semibold mb-1">–î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤</h3>
        <p className="text-white/60 text-sm mb-3">–ù–∞–π–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–æ–ª–æ—Ç–æ</p>
        <button 
          onClick={handleGatherMaterials}
          className="bg-gradient-to-r from-green-500 to-emerald-500 text-white py-2 px-4 rounded font-semibold hover:shadow-lg hover:shadow-green-500/50 transition-all hover:scale-105"
        >
          –°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã
        </button>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è */}
      {showEquipment && selectedCat && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-space-dark/90 backdrop-blur-lg border border-cosmic-purple/50 rounded-lg max-w-md w-full max-h-[80vh] overflow-y-auto">
            <div className="p-4 border-b border-cosmic-purple/30">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-bold text-white flex items-center gap-2">
                  <Icon name="Package" size={20} />
                  –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
                </h3>
                <button
                  onClick={() => setShowEquipment(false)}
                  className="text-white/70 hover:text-white"
                >
                  <Icon name="X" size={20} />
                </button>
              </div>
            </div>
            
            <div className="p-4 space-y-3">
              {inventory.length === 0 ? (
                <div className="text-center py-8">
                  <Icon name="Package" size={32} className="text-white/30 mx-auto mb-2" />
                  <p className="text-white/60">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>
                  <p className="text-white/40 text-sm">–ù–∞–π–¥–∏—Ç–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –≤ –∫–æ—Å–º–æ—Å–µ</p>
                </div>
              ) : (
                inventory.map(equipment => (
                  <div key={equipment.id} className={`border-2 rounded-lg p-3 ${getRarityColor(equipment.rarity)}`}>
                    <div className="flex items-center gap-3">
                      <div className="text-2xl">{equipment.icon}</div>
                      <div className="flex-1">
                        <h4 className="text-white font-semibold">{equipment.name}</h4>
                        <p className={`text-sm ${getRarityColor(equipment.rarity).split(' ')[0]}`}>
                          {getRarityName(equipment.rarity)} {equipment.type === 'weapon' ? '–û—Ä—É–∂–∏–µ' : equipment.type === 'armor' ? '–ë—Ä–æ–Ω—è' : '–ê–∫—Å–µ—Å—Å—É–∞—Ä'} ‚Ä¢ –£—Ä. {equipment.level || 1}
                        </p>
                        <div className="text-xs text-white/70 mt-1">
                          {Object.entries(equipment.bonuses).map(([key, value]) => (
                            <span key={key} className="mr-2">+{value} {key}</span>
                          ))}
                        </div>
                      </div>
                      <button
                        onClick={() => handleEquipItem(selectedCat, equipment)}
                        className="bg-cosmic-purple/30 hover:bg-cosmic-purple/50 text-white px-3 py-1 rounded text-sm font-semibold transition-all"
                      >
                        –ù–∞–¥–µ—Ç—å
                      </button>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π */}
      {showCrafting && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-space-dark/90 backdrop-blur-lg border border-yellow-500/50 rounded-lg max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="p-4 border-b border-yellow-500/30">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-bold text-white flex items-center gap-2">
                  <Icon name="Hammer" size={20} />
                  –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è —É–ª—É—á—à–µ–Ω–∏–π
                </h3>
                <button
                  onClick={() => setShowCrafting(false)}
                  className="text-white/70 hover:text-white"
                >
                  <Icon name="X" size={20} />
                </button>
              </div>
            </div>
            
            <div className="p-4">
              {/* –†–µ—Å—É—Ä—Å—ã –∏–≥—Ä–æ–∫–∞ */}
              <div className="bg-space-dark/60 rounded-lg p-4 mb-4">
                <h4 className="text-white font-semibold mb-3 flex items-center gap-2">
                  <Icon name="Coins" size={16} />
                  –í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã
                </h4>
                <div className="grid grid-cols-2 gap-3">
                  <div className="bg-yellow-500/20 border border-yellow-500/40 rounded p-2 text-center">
                    <div className="text-yellow-400 font-bold">{gold}</div>
                    <div className="text-white/70 text-sm">üí∞ –ó–æ–ª–æ—Ç–æ</div>
                  </div>
                  {Object.entries(materials).map(([materialId, amount]) => {
                    const material = craftingMaterials[materialId]
                    if (!material) return null
                    return (
                      <div key={materialId} className={`border rounded p-2 text-center ${getRarityColor(material.rarity)}`}>
                        <div className="text-white font-bold">{amount}</div>
                        <div className="text-white/70 text-sm">{material.icon} {material.name}</div>
                      </div>
                    )
                  })}
                </div>
              </div>

              {/* –°–ø–∏—Å–æ–∫ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è */}
              <h4 className="text-white font-semibold mb-3">–£–ª—É—á—à–∏—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É</h4>
              <div className="space-y-3 max-h-60 overflow-y-auto">
                {inventory.length === 0 ? (
                  <div className="text-center py-8">
                    <Icon name="Package" size={32} className="text-white/30 mx-auto mb-2" />
                    <p className="text-white/60">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>
                  </div>
                ) : (
                  inventory.map(equipment => {
                    const recipe = getUpgradeRecipe(equipment)
                    const canUpgrade = recipe.materialsCost.every(cost => (materials[cost.materialId] || 0) >= cost.amount) && gold >= recipe.goldCost
                    
                    return (
                      <div key={equipment.id} className={`border-2 rounded-lg p-3 ${getRarityColor(equipment.rarity)}`}>
                        <div className="flex items-center gap-3">
                          <div className="text-2xl">{equipment.icon}</div>
                          <div className="flex-1">
                            <h5 className="text-white font-semibold">{equipment.name}</h5>
                            <p className={`text-sm ${getRarityColor(equipment.rarity).split(' ')[0]}`}>
                              {getRarityName(equipment.rarity)} ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å {equipment.level || 1}
                            </p>
                            <div className="text-xs text-white/70 mt-1">
                              {Object.entries(equipment.bonuses).map(([key, value]) => (
                                <span key={key} className="mr-2">+{value} {key}</span>
                              ))}
                            </div>
                            
                            {/* –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è */}
                            <div className="mt-2 text-xs">
                              <div className="text-white/60 mb-1">–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è:</div>
                              <div className="flex flex-wrap gap-2">
                                {recipe.materialsCost.map(cost => {
                                  const material = craftingMaterials[cost.materialId]
                                  const hasEnough = (materials[cost.materialId] || 0) >= cost.amount
                                  return (
                                    <span key={cost.materialId} className={hasEnough ? 'text-green-400' : 'text-red-400'}>
                                      {material?.icon} {cost.amount}
                                    </span>
                                  )
                                })}
                                <span className={gold >= recipe.goldCost ? 'text-green-400' : 'text-red-400'}>
                                  üí∞ {recipe.goldCost}
                                </span>
                              </div>
                              <div className="text-white/50 text-xs mt-1">
                                –®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: {recipe.successRate}%
                              </div>
                            </div>
                          </div>
                          
                          <button
                            onClick={() => handleUpgradeEquipment(equipment.id)}
                            disabled={!canUpgrade || isUpgrading === equipment.id}
                            className={`px-3 py-2 rounded text-sm font-semibold transition-all ${
                              canUpgrade && isUpgrading !== equipment.id
                                ? 'bg-yellow-500/30 hover:bg-yellow-500/50 text-white'
                                : 'bg-gray-500/30 text-gray-400 cursor-not-allowed'
                            }`}
                          >
                            {isUpgrading === equipment.id ? (
                              <>
                                <div className="animate-spin rounded-full h-3 w-3 border border-white border-t-transparent inline-block mr-1"></div>
                                –£–ª—É—á—à–µ–Ω–∏–µ...
                              </>
                            ) : (
                              '–£–ª—É—á—à–∏—Ç—å'
                            )}
                          </button>
                        </div>
                      </div>
                    )
                  })
                )}
              </div>

              {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–∏—è */}
              {upgradeResult && (
                <div className={`mt-4 p-3 rounded-lg text-center ${
                  upgradeResult.success ? 'bg-green-500/20 border border-green-500/40' : 'bg-red-500/20 border border-red-500/40'
                }`}>
                  <p className={upgradeResult.success ? 'text-green-400' : 'text-red-400'}>
                    {upgradeResult.message}
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default CatsSection