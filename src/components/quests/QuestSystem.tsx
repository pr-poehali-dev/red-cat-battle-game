import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import Icon from '@/components/ui/icon'
import type { Quest, Achievement, PlayerQuestProgress, QuestReward } from './QuestTypes'
import type { Cat } from '@/types/game'

interface QuestSystemProps {
  playerLevel: number
  playerCoins: number
  ownedCats: Cat[]
  totalBattles: number
  totalWins: number
  totalTournaments: number
  guildLevel?: number
  onRewardClaimed: (reward: QuestReward) => void
  onBack: () => void
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
const generateDailyQuests = (): Quest[] => [
  {
    id: 'daily_battles',
    title: '‚öîÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –í–æ–∏–Ω',
    description: '–í—ã–∏–≥—Ä–∞–π 3 –±–∏—Ç–≤—ã —Å–µ–≥–æ–¥–Ω—è',
    type: 'daily',
    category: 'battle',
    objectives: [
      {
        id: 'win_3_battles',
        description: '–ü–æ–±–µ–¥—ã –≤ –±–∏—Ç–≤–∞—Ö',
        type: 'win_battles',
        targetValue: 3,
        currentValue: 0,
        isCompleted: false
      }
    ],
    rewards: [
      { type: 'coins', value: 500, amount: 500, description: '500 –º–æ–Ω–µ—Ç' },
      { type: 'experience', value: 100, amount: 100, description: '100 –æ–ø—ã—Ç–∞' }
    ],
    isCompleted: false,
    progress: 0,
    maxProgress: 3,
    expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
    rarity: 'common',
    icon: '‚öîÔ∏è'
  },
  {
    id: 'daily_coins',
    title: 'üí∞ –°–±–æ—Ä—â–∏–∫ –ú–æ–Ω–µ—Ç',
    description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π 2000 –º–æ–Ω–µ—Ç –∑–∞ –¥–µ–Ω—å',
    type: 'daily',
    category: 'progression',
    objectives: [
      {
        id: 'earn_2000_coins',
        description: '–ú–æ–Ω–µ—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–Ω—ã',
        type: 'earn_coins',
        targetValue: 2000,
        currentValue: 0,
        isCompleted: false
      }
    ],
    rewards: [
      { type: 'coins', value: 800, amount: 800, description: '800 –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç' },
      { type: 'item', value: 'power_boost', amount: 1, description: '–£—Å–∏–ª–∏—Ç–µ–ª—å —Å–∏–ª—ã' }
    ],
    isCompleted: false,
    progress: 0,
    maxProgress: 2000,
    expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
    rarity: 'common',
    icon: 'üí∞'
  },
  {
    id: 'daily_cat_upgrade',
    title: '‚≠ê –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ö–æ—Ç–æ–≤',
    description: '–£–ª—É—á—à–∏ 2 –∫–æ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è',
    type: 'daily',
    category: 'collection',
    objectives: [
      {
        id: 'upgrade_2_cats',
        description: '–ö–æ—Ç—ã —É–ª—É—á—à–µ–Ω—ã',
        type: 'upgrade_cats',
        targetValue: 2,
        currentValue: 0,
        isCompleted: false
      }
    ],
    rewards: [
      { type: 'coins', value: 1000, amount: 1000, description: '1000 –º–æ–Ω–µ—Ç' },
      { type: 'experience', value: 200, amount: 200, description: '200 –æ–ø—ã—Ç–∞' }
    ],
    isCompleted: false,
    progress: 0,
    maxProgress: 2,
    expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
    rarity: 'rare',
    icon: '‚≠ê'
  }
]

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
const generateWeeklyQuests = (): Quest[] => [
  {
    id: 'weekly_tournament',
    title: 'üèÜ –¢—É—Ä–Ω–∏—Ä–Ω—ã–π –ú–∞—Å—Ç–µ—Ä',
    description: '–£—á–∞—Å—Ç–≤—É–π –≤ 5 —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∑–∞ –Ω–µ–¥–µ–ª—é',
    type: 'weekly',
    category: 'battle',
    objectives: [
      {
        id: 'join_5_tournaments',
        description: '–¢—É—Ä–Ω–∏—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã',
        type: 'join_tournament',
        targetValue: 5,
        currentValue: 0,
        isCompleted: false
      }
    ],
    rewards: [
      { type: 'coins', value: 5000, amount: 5000, description: '5000 –º–æ–Ω–µ—Ç' },
      { type: 'cat', value: 'rare_tournament_cat', amount: 1, description: '–†–µ–¥–∫–∏–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –∫–æ—Ç' },
      { type: 'experience', value: 1000, amount: 1000, description: '1000 –æ–ø—ã—Ç–∞' }
    ],
    isCompleted: false,
    progress: 0,
    maxProgress: 5,
    expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
    rarity: 'epic',
    icon: 'üèÜ'
  },
  {
    id: 'weekly_collection',
    title: 'üê± –í–µ–ª–∏–∫–∏–π –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
    description: '–°–æ–±–µ—Ä–∏ 3 –Ω–æ–≤—ã—Ö –∫–æ—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é',
    type: 'weekly',
    category: 'collection',
    objectives: [
      {
        id: 'collect_3_cats',
        description: '–ù–æ–≤—ã–µ –∫–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã',
        type: 'collect_cats',
        targetValue: 3,
        currentValue: 0,
        isCompleted: false
      }
    ],
    rewards: [
      { type: 'coins', value: 3000, amount: 3000, description: '3000 –º–æ–Ω–µ—Ç' },
      { type: 'item', value: 'cat_summoner', amount: 1, description: '–ü—Ä–∏–∑—ã–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ–≤' },
      { type: 'title', value: '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ö–æ—Ç–æ–≤', amount: 1, description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–∏—Ç—É–ª' }
    ],
    isCompleted: false,
    progress: 0,
    maxProgress: 3,
    expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
    rarity: 'epic',
    icon: 'üê±'
  },
  {
    id: 'weekly_social',
    title: 'üë• –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ó–≤–µ–∑–¥–∞',
    description: '–£—á–∞—Å—Ç–≤—É–π –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö 10 —Ä–∞–∑',
    type: 'weekly',
    category: 'social',
    objectives: [
      {
        id: 'guild_activity_10',
        description: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥–∏–ª—å–¥–∏–∏',
        type: 'guild_activity',
        targetValue: 10,
        currentValue: 0,
        isCompleted: false
      }
    ],
    rewards: [
      { type: 'coins', value: 4000, amount: 4000, description: '4000 –º–æ–Ω–µ—Ç' },
      { type: 'experience', value: 800, amount: 800, description: '800 –æ–ø—ã—Ç–∞' },
      { type: 'cosmetic', value: 'guild_banner', amount: 1, description: '–ë–∞–Ω–Ω–µ—Ä –≥–∏–ª—å–¥–∏–∏' }
    ],
    isCompleted: false,
    progress: 0,
    maxProgress: 10,
    expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
    rarity: 'rare',
    icon: 'üë•'
  }
]

// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const ACHIEVEMENTS: Achievement[] = [
  {
    id: 'first_victory',
    title: 'üèÖ –ü–µ—Ä–≤–∞—è –ü–æ–±–µ–¥–∞',
    description: '–í—ã–∏–≥—Ä–∞–π —Å–≤–æ—é –ø–µ—Ä–≤—É—é –±–∏—Ç–≤—É',
    category: 'battle_master',
    requirements: [
      { type: 'total_wins', value: 1, description: '–ü–æ–±–µ–¥—ã –≤ –±–∏—Ç–≤–∞—Ö: 1' }
    ],
    rewards: [
      { type: 'coins', value: 100, amount: 100, description: '100 –º–æ–Ω–µ—Ç' },
      { type: 'title', value: '–ù–æ–≤–∏—á–æ–∫', amount: 1, description: '–¢–∏—Ç—É–ª "–ù–æ–≤–∏—á–æ–∫"' }
    ],
    isUnlocked: false,
    progress: 0,
    maxProgress: 1,
    rarity: 'bronze',
    icon: 'üèÖ',
    badge: 'ü•â'
  },
  {
    id: 'battle_veteran',
    title: '‚öîÔ∏è –í–µ—Ç–µ—Ä–∞–Ω –ë–∏—Ç–≤',
    description: '–í—ã–∏–≥—Ä–∞–π 100 –±–∏—Ç–≤',
    category: 'battle_master',
    requirements: [
      { type: 'total_wins', value: 100, description: '–ü–æ–±–µ–¥—ã –≤ –±–∏—Ç–≤–∞—Ö: 100' }
    ],
    rewards: [
      { type: 'coins', value: 5000, amount: 5000, description: '5000 –º–æ–Ω–µ—Ç' },
      { type: 'cat', value: 'veteran_cat', amount: 1, description: '–ö–æ—Ç-–í–µ—Ç–µ—Ä–∞–Ω' },
      { type: 'title', value: '–í–µ—Ç–µ—Ä–∞–Ω –ê—Ä–µ–Ω—ã', amount: 1, description: '–¢–∏—Ç—É–ª "–í–µ—Ç–µ—Ä–∞–Ω –ê—Ä–µ–Ω—ã"' }
    ],
    isUnlocked: false,
    progress: 0,
    maxProgress: 100,
    rarity: 'gold',
    icon: '‚öîÔ∏è',
    badge: 'ü•á'
  },
  {
    id: 'cat_master',
    title: 'üê± –ú–∞—Å—Ç–µ—Ä –ö–æ—Ç–æ–≤',
    description: '–°–æ–±–µ—Ä–∏ 50 —Ä–∞–∑–Ω—ã—Ö –∫–æ—Ç–æ–≤',
    category: 'collector',
    requirements: [
      { type: 'cats_collected', value: 50, description: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –∫–æ—Ç–æ–≤: 50' }
    ],
    rewards: [
      { type: 'coins', value: 10000, amount: 10000, description: '10,000 –º–æ–Ω–µ—Ç' },
      { type: 'cat', value: 'legendary_master_cat', amount: 1, description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ú–∞—Å—Ç–µ—Ä-–ö–æ—Ç' },
      { type: 'cosmetic', value: 'cat_crown', amount: 1, description: '–ö–æ—Ä–æ–Ω–∞ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è –ö–æ—Ç–æ–≤' }
    ],
    isUnlocked: false,
    progress: 0,
    maxProgress: 50,
    rarity: 'platinum',
    icon: 'üê±',
    badge: 'üëë'
  },
  {
    id: 'millionaire',
    title: 'üíé –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ú–∏–ª–ª–∏–æ–Ω–µ—Ä',
    description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π 1,000,000 –º–æ–Ω–µ—Ç –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è',
    category: 'progression',
    requirements: [
      { type: 'coins_earned', value: 1000000, description: '–ú–æ–Ω–µ—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–Ω—ã: 1,000,000' }
    ],
    rewards: [
      { type: 'coins', value: 100000, amount: 100000, description: '100,000 –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç' },
      { type: 'title', value: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ú–∏–ª–ª–∏–æ–Ω–µ—Ä', amount: 1, description: '–ü—Ä–µ—Å—Ç–∏–∂–Ω—ã–π —Ç–∏—Ç—É–ª' },
      { type: 'cosmetic', value: 'golden_spaceship', amount: 1, description: '–ó–æ–ª–æ—Ç–æ–π –∫–æ—Ä–∞–±–ª—å' }
    ],
    isUnlocked: false,
    progress: 0,
    maxProgress: 1000000,
    rarity: 'diamond',
    icon: 'üíé',
    badge: 'üíé'
  },
  {
    id: 'tournament_champion',
    title: 'üèÜ –ß–µ–º–ø–∏–æ–Ω –¢—É—Ä–Ω–∏—Ä–æ–≤',
    description: '–í—ã–∏–≥—Ä–∞–π 25 —Ç—É—Ä–Ω–∏—Ä–æ–≤',
    category: 'battle_master',
    requirements: [
      { type: 'tournaments_won', value: 25, description: '–¢—É—Ä–Ω–∏—Ä—ã –≤—ã–∏–≥—Ä–∞–Ω—ã: 25' }
    ],
    rewards: [
      { type: 'coins', value: 15000, amount: 15000, description: '15,000 –º–æ–Ω–µ—Ç' },
      { type: 'cat', value: 'champion_cat', amount: 1, description: '–ö–æ—Ç-–ß–µ–º–ø–∏–æ–Ω' },
      { type: 'title', value: '–í–µ–ª–∏–∫–∏–π –ß–µ–º–ø–∏–æ–Ω', amount: 1, description: '–¢–∏—Ç—É–ª "–í–µ–ª–∏–∫–∏–π –ß–µ–º–ø–∏–æ–Ω"' },
      { type: 'cosmetic', value: 'champion_trophy', amount: 1, description: '–¢—Ä–æ—Ñ–µ–π –ß–µ–º–ø–∏–æ–Ω–∞' }
    ],
    isUnlocked: false,
    progress: 0,
    maxProgress: 25,
    rarity: 'platinum',
    icon: 'üèÜ',
    badge: 'üèÜ'
  },
  {
    id: 'social_butterfly',
    title: 'ü¶ã –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ë–∞–±–æ—á–∫–∞',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏ 10 —É—Ä–æ–≤–Ω—è –≥–∏–ª—å–¥–∏–∏',
    category: 'social_butterfly',
    requirements: [
      { type: 'guild_level', value: 10, description: '–£—Ä–æ–≤–µ–Ω—å –≥–∏–ª—å–¥–∏–∏: 10' }
    ],
    rewards: [
      { type: 'coins', value: 8000, amount: 8000, description: '8,000 –º–æ–Ω–µ—Ç' },
      { type: 'title', value: '–õ–∏–¥–µ—Ä –°–æ–æ–±—â–µ—Å—Ç–≤–∞', amount: 1, description: '–¢–∏—Ç—É–ª "–õ–∏–¥–µ—Ä –°–æ–æ–±—â–µ—Å—Ç–≤–∞"' },
      { type: 'cosmetic', value: 'guild_master_cape', amount: 1, description: '–ü–ª–∞—â –ú–∞—Å—Ç–µ—Ä–∞ –ì–∏–ª—å–¥–∏–∏' }
    ],
    isUnlocked: false,
    progress: 0,
    maxProgress: 10,
    rarity: 'gold',
    icon: 'ü¶ã',
    badge: 'ü¶ã'
  }
]

export default function QuestSystem({ playerLevel, playerCoins, ownedCats, totalBattles, totalWins, totalTournaments, guildLevel = 0, onRewardClaimed, onBack }: QuestSystemProps) {
  const [questProgress, setQuestProgress] = useState<PlayerQuestProgress>({
    dailyQuests: generateDailyQuests(),
    weeklyQuests: generateWeeklyQuests(),
    achievements: ACHIEVEMENTS,
    questsCompletedToday: 0,
    questsCompletedThisWeek: 0,
    totalQuestsCompleted: 0,
    achievementPoints: 0,
    lastDailyReset: new Date(),
    lastWeeklyReset: new Date(),
    loginStreak: 1,
    totalLoginDays: 1
  })

  const [selectedTab, setSelectedTab] = useState<'daily' | 'weekly' | 'achievements'>('daily')

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  useEffect(() => {
    setQuestProgress(prev => ({
      ...prev,
      achievements: prev.achievements.map(achievement => {
        let newProgress = 0
        
        achievement.requirements.forEach(req => {
          switch (req.type) {
            case 'total_wins':
              newProgress = Math.max(newProgress, totalWins)
              break
            case 'total_battles':
              newProgress = Math.max(newProgress, totalBattles)
              break
            case 'cats_collected':
              newProgress = Math.max(newProgress, ownedCats.length)
              break
            case 'tournaments_won':
              newProgress = Math.max(newProgress, totalTournaments)
              break
            case 'guild_level':
              newProgress = Math.max(newProgress, guildLevel)
              break
            case 'level_reached':
              newProgress = Math.max(newProgress, playerLevel)
              break
          }
        })
        
        const isUnlocked = newProgress >= achievement.maxProgress && !achievement.isUnlocked
        
        return {
          ...achievement,
          progress: Math.min(newProgress, achievement.maxProgress),
          isUnlocked,
          unlockedAt: isUnlocked ? new Date() : achievement.unlockedAt
        }
      })
    }))
  }, [totalWins, totalBattles, ownedCats.length, totalTournaments, guildLevel, playerLevel])

  const claimQuestReward = (questId: string, questType: 'daily' | 'weekly') => {
    const questsKey = questType === 'daily' ? 'dailyQuests' : 'weeklyQuests'
    
    setQuestProgress(prev => ({
      ...prev,
      [questsKey]: prev[questsKey].map(quest => {
        if (quest.id === questId && quest.progress >= quest.maxProgress && !quest.isCompleted) {
          quest.rewards.forEach(reward => onRewardClaimed(reward))
          return { ...quest, isCompleted: true }
        }
        return quest
      }),
      questsCompletedToday: questType === 'daily' ? prev.questsCompletedToday + 1 : prev.questsCompletedToday,
      questsCompletedThisWeek: questType === 'weekly' ? prev.questsCompletedThisWeek + 1 : prev.questsCompletedThisWeek,
      totalQuestsCompleted: prev.totalQuestsCompleted + 1
    }))
  }

  const claimAchievementReward = (achievementId: string) => {
    setQuestProgress(prev => ({
      ...prev,
      achievements: prev.achievements.map(achievement => {
        if (achievement.id === achievementId && achievement.isUnlocked) {
          achievement.rewards.forEach(reward => onRewardClaimed(reward))
          return { ...achievement, isUnlocked: true }
        }
        return achievement
      }),
      achievementPoints: prev.achievementPoints + 100
    }))
  }

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'legendary': return 'from-yellow-400 to-orange-600'
      case 'epic': return 'from-purple-400 to-pink-600'
      case 'rare': return 'from-blue-400 to-cyan-600'
      case 'diamond': return 'from-cyan-400 to-blue-600'
      case 'platinum': return 'from-gray-300 to-gray-500'
      case 'gold': return 'from-yellow-400 to-yellow-600'
      case 'silver': return 'from-gray-400 to-gray-600'
      case 'bronze': return 'from-orange-400 to-orange-600'
      default: return 'from-green-400 to-emerald-600'
    }
  }

  const renderQuestCard = (quest: Quest, type: 'daily' | 'weekly') => (
    <Card key={quest.id} className={`bg-gradient-to-r ${getRarityColor(quest.rarity)} bg-opacity-10`}>
      <CardHeader>
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="flex items-center gap-2 text-lg">
              <span className="text-2xl">{quest.icon}</span>
              {quest.title}
            </CardTitle>
            <p className="text-sm text-gray-300 mt-1">{quest.description}</p>
          </div>
          <div className="flex flex-col items-end gap-1">
            <Badge className={`${getRarityColor(quest.rarity)} text-white`}>
              {quest.rarity === 'legendary' ? '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π' :
               quest.rarity === 'epic' ? '–≠–ø–∏—á–µ—Å–∫–∏–π' :
               quest.rarity === 'rare' ? '–†–µ–¥–∫–∏–π' : '–û–±—ã—á–Ω—ã–π'}
            </Badge>
            {quest.expiresAt && (
              <p className="text-xs text-gray-400">
                –î–æ: {quest.expiresAt.toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' })}
              </p>
            )}
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-4">
        <div>
          <div className="flex justify-between text-sm mb-1">
            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
            <span>{quest.progress}/{quest.maxProgress}</span>
          </div>
          <Progress value={(quest.progress / quest.maxProgress) * 100} className="h-2" />
        </div>
        
        <div className="space-y-2">
          <p className="text-sm font-semibold text-yellow-300">üéÅ –ù–∞–≥—Ä–∞–¥—ã:</p>
          <div className="flex flex-wrap gap-2">
            {quest.rewards.map((reward, index) => (
              <Badge key={index} variant="outline" className="text-xs">
                {reward.description}
              </Badge>
            ))}
          </div>
        </div>
        
        <Button
          onClick={() => claimQuestReward(quest.id, type)}
          disabled={quest.progress < quest.maxProgress || quest.isCompleted}
          className={`w-full ${
            quest.isCompleted ? 'bg-green-600' :
            quest.progress >= quest.maxProgress ? 'bg-gradient-to-r from-yellow-600 to-orange-600' :
            'bg-gray-600'
          }`}
        >
          {quest.isCompleted ? (
            <>
              <Icon name="Check" size={16} className="mr-2" />
              –í—ã–ø–æ–ª–Ω–µ–Ω–æ
            </>
          ) : quest.progress >= quest.maxProgress ? (
            <>
              <Icon name="Gift" size={16} className="mr-2" />
              –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É
            </>
          ) : (
            <>
              <Icon name="Clock" size={16} className="mr-2" />
              –í –ø—Ä–æ—Ü–µ—Å—Å–µ
            </>
          )}
        </Button>
      </CardContent>
    </Card>
  )

  const renderAchievementCard = (achievement: Achievement) => (
    <Card key={achievement.id} className={`bg-gradient-to-r ${getRarityColor(achievement.rarity)} bg-opacity-10`}>
      <CardHeader>
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="flex items-center gap-2 text-lg">
              <span className="text-2xl">{achievement.icon}</span>
              {achievement.title}
              {achievement.badge && <span className="text-lg">{achievement.badge}</span>}
            </CardTitle>
            <p className="text-sm text-gray-300 mt-1">{achievement.description}</p>
          </div>
          <Badge className={`${getRarityColor(achievement.rarity)} text-white`}>
            {achievement.rarity === 'diamond' ? '–ê–ª–º–∞–∑–Ω–æ–µ' :
             achievement.rarity === 'platinum' ? '–ü–ª–∞—Ç–∏–Ω–æ–≤–æ–µ' :
             achievement.rarity === 'gold' ? '–ó–æ–ª–æ—Ç–æ–µ' :
             achievement.rarity === 'silver' ? '–°–µ—Ä–µ–±—Ä—è–Ω–æ–µ' : '–ë—Ä–æ–Ω–∑–æ–≤–æ–µ'}
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-4">
        <div>
          <div className="flex justify-between text-sm mb-1">
            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
            <span>{achievement.progress}/{achievement.maxProgress}</span>
          </div>
          <Progress value={(achievement.progress / achievement.maxProgress) * 100} className="h-2" />
        </div>
        
        <div className="space-y-2">
          <p className="text-sm font-semibold text-gray-400">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</p>
          {achievement.requirements.map((req, index) => (
            <p key={index} className="text-xs text-gray-300">‚Ä¢ {req.description}</p>
          ))}
        </div>
        
        <div className="space-y-2">
          <p className="text-sm font-semibold text-yellow-300">üéÅ –ù–∞–≥—Ä–∞–¥—ã:</p>
          <div className="flex flex-wrap gap-2">
            {achievement.rewards.map((reward, index) => (
              <Badge key={index} variant="outline" className="text-xs">
                {reward.description}
              </Badge>
            ))}
          </div>
        </div>
        
        <Button
          onClick={() => claimAchievementReward(achievement.id)}
          disabled={!achievement.isUnlocked}
          className={`w-full ${
            achievement.isUnlocked ? 'bg-gradient-to-r from-yellow-600 to-orange-600' : 'bg-gray-600'
          }`}
        >
          {achievement.isUnlocked ? (
            <>
              <Icon name="Award" size={16} className="mr-2" />
              –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É
            </>
          ) : (
            <>
              <Icon name="Lock" size={16} className="mr-2" />
              –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
            </>
          )}
        </Button>
      </CardContent>
    </Card>
  )

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Button onClick={onBack} variant="outline" className="flex items-center gap-2">
          <Icon name="ArrowLeft" size={16} />
          –ù–∞–∑–∞–¥
        </Button>
        
        <h1 className="text-3xl font-bold bg-gradient-to-r from-yellow-400 to-orange-600 bg-clip-text text-transparent">
          üéØ –ö–≤–µ—Å—Ç—ã –∏ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        </h1>
        
        <div className="text-right">
          <p className="text-sm text-gray-400">–û—á–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</p>
          <p className="text-xl font-bold text-yellow-400">{questProgress.achievementPoints} üèÜ</p>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card className="bg-blue-900/20">
          <CardContent className="p-4 text-center">
            <p className="text-2xl font-bold text-blue-400">{questProgress.questsCompletedToday}</p>
            <p className="text-sm text-gray-400">–ö–≤–µ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è</p>
          </CardContent>
        </Card>
        <Card className="bg-purple-900/20">
          <CardContent className="p-4 text-center">
            <p className="text-2xl font-bold text-purple-400">{questProgress.questsCompletedThisWeek}</p>
            <p className="text-sm text-gray-400">–ö–≤–µ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é</p>
          </CardContent>
        </Card>
        <Card className="bg-green-900/20">
          <CardContent className="p-4 text-center">
            <p className="text-2xl font-bold text-green-400">{questProgress.totalQuestsCompleted}</p>
            <p className="text-sm text-gray-400">–í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤</p>
          </CardContent>
        </Card>
        <Card className="bg-yellow-900/20">
          <CardContent className="p-4 text-center">
            <p className="text-2xl font-bold text-yellow-400">{questProgress.achievements.filter(a => a.isUnlocked).length}</p>
            <p className="text-sm text-gray-400">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π</p>
          </CardContent>
        </Card>
      </div>

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <Tabs value={selectedTab} onValueChange={(value) => setSelectedTab(value as any)}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="daily" className="flex items-center gap-2">
            <Icon name="Sun" size={16} />
            –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ ({questProgress.dailyQuests.filter(q => !q.isCompleted).length})
          </TabsTrigger>
          <TabsTrigger value="weekly" className="flex items-center gap-2">
            <Icon name="Calendar" size={16} />
            –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ ({questProgress.weeklyQuests.filter(q => !q.isCompleted).length})
          </TabsTrigger>
          <TabsTrigger value="achievements" className="flex items-center gap-2">
            <Icon name="Award" size={16} />
            –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ({questProgress.achievements.filter(a => a.isUnlocked).length}/{questProgress.achievements.length})
          </TabsTrigger>
        </TabsList>

        <TabsContent value="daily" className="space-y-4">
          <div className="text-center">
            <h2 className="text-xl font-bold mb-2">üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ö–≤–µ—Å—Ç—ã</h2>
            <p className="text-gray-400">–û–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞</p>
          </div>
          <div className="grid gap-4 md:grid-cols-2">
            {questProgress.dailyQuests.map(quest => renderQuestCard(quest, 'daily'))}
          </div>
        </TabsContent>

        <TabsContent value="weekly" className="space-y-4">
          <div className="text-center">
            <h2 className="text-xl font-bold mb-2">üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ö–≤–µ—Å—Ç—ã</h2>
            <p className="text-gray-400">–û–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é</p>
          </div>
          <div className="grid gap-4 md:grid-cols-2">
            {questProgress.weeklyQuests.map(quest => renderQuestCard(quest, 'weekly'))}
          </div>
        </TabsContent>

        <TabsContent value="achievements" className="space-y-4">
          <div className="text-center">
            <h2 className="text-xl font-bold mb-2">üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
            <p className="text-gray-400">–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤</p>
          </div>
          <div className="grid gap-4">
            {questProgress.achievements.map(renderAchievementCard)}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}