import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import Icon from '@/components/ui/icon'
import type { Cat } from '@/types/game'

interface Enemy {
  name: string
  level: number
  attack: number
  defense: number
  health: number
  maxHealth: number
  speed: number
  emoji: string
  reward: number
  experience: number
}

interface Tournament {
  name: string
  emoji: string
  requiredLevel: number
  enemies: Enemy[]
  finalReward: number
  description: string
  color: string
}

interface CatTournamentProps {
  ownedCats: Cat[]
  playerCoins: number
  onTournamentWin: (reward: number, experience: number) => void
  onCatExperience: (catId: string, experience: number) => void
}

const tournaments: Tournament[] = [
  {
    name: "–ú–µ–∂–ø–ª–∞–Ω–µ—Ç–Ω–∞—è –õ–∏–≥–∞",
    emoji: "üåç",
    requiredLevel: 1,
    enemies: [
      { name: "–ú–∞—Ä—Å–∏–∞–Ω—Å–∫–∏–π –°–∫–∞—É—Ç", level: 1, attack: 15, defense: 10, health: 50, maxHealth: 50, speed: 15, emoji: "üëΩ", reward: 30, experience: 25 },
      { name: "–õ—É–Ω–Ω—ã–π –°—Ç—Ä–∞–∂", level: 2, attack: 20, defense: 12, health: 70, maxHealth: 70, speed: 18, emoji: "üõ°Ô∏è", reward: 45, experience: 35 },
      { name: "–í–µ–Ω–µ—Ä–∏–∞–Ω—Å–∫–∏–π –ß–µ–º–ø–∏–æ–Ω", level: 3, attack: 28, defense: 15, health: 90, maxHealth: 90, speed: 22, emoji: "‚≠ê", reward: 60, experience: 50 }
    ],
    finalReward: 200,
    description: "3 –±–æ—è –ø—Ä–æ—Ç–∏–≤ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö –±–æ–π—Ü–æ–≤",
    color: "from-blue-500 to-purple-600"
  },
  {
    name: "–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ß–µ–º–ø–∏–æ–Ω–∞—Ç",
    emoji: "üåå",
    requiredLevel: 5,
    enemies: [
      { name: "–ê–Ω–¥—Ä–æ–º–µ–¥—Å–∫–∏–π –í–æ–∏–Ω", level: 5, attack: 40, defense: 25, health: 120, maxHealth: 120, speed: 30, emoji: "‚öîÔ∏è", reward: 80, experience: 70 },
      { name: "–ù–µ–π—Ç—Ä–æ–Ω–Ω–∞—è –ú–∞—à–∏–Ω–∞", level: 6, attack: 50, defense: 30, health: 150, maxHealth: 150, speed: 25, emoji: "ü§ñ", reward: 100, experience: 85 },
      { name: "–ö–≤–∞–∑–∞—Ä–Ω—ã–π –¢–∏—Ç–∞–Ω", level: 7, attack: 60, defense: 35, health: 180, maxHealth: 180, speed: 35, emoji: "üí´", reward: 120, experience: 100 },
      { name: "–ß—ë—Ä–Ω–∞—è –î—ã—Ä–∞", level: 8, attack: 75, defense: 40, health: 220, maxHealth: 220, speed: 40, emoji: "‚ö´", reward: 150, experience: 120 }
    ],
    finalReward: 500,
    description: "4 –±–æ—è –ø—Ä–æ—Ç–∏–≤ –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∏—Ç–∞–Ω–æ–≤",
    color: "from-purple-600 to-pink-600"
  },
  {
    name: "–¢—É—Ä–Ω–∏—Ä –ë–æ–≥–æ–≤",
    emoji: "üëë",
    requiredLevel: 10,
    enemies: [
      { name: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ê—Ä—Ö–∞–Ω–≥–µ–ª", level: 10, attack: 90, defense: 50, health: 300, maxHealth: 300, speed: 50, emoji: "üòá", reward: 200, experience: 150 },
      { name: "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –í—Ä–µ–º–µ–Ω–∏", level: 12, attack: 110, defense: 60, health: 350, maxHealth: 350, speed: 55, emoji: "‚è∞", reward: 250, experience: 180 },
      { name: "–°–æ–∑–¥–∞—Ç–µ–ª—å –í—Å–µ–ª–µ–Ω–Ω–æ–π", level: 15, attack: 140, defense: 80, health: 450, maxHealth: 450, speed: 65, emoji: "üåü", reward: 300, experience: 220 },
      { name: "–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –ë—ã—Ç–∏–µ", level: 18, attack: 180, defense: 100, health: 600, maxHealth: 600, speed: 80, emoji: "üíé", reward: 400, experience: 300 },
      { name: "–ê–ª—å—Ñ–∞ –∏ –û–º–µ–≥–∞", level: 20, attack: 250, defense: 150, health: 1000, maxHealth: 1000, speed: 100, emoji: "‚àû", reward: 666, experience: 500 }
    ],
    finalReward: 2000,
    description: "5 –±–æ—ë–≤ –ø—Ä–æ—Ç–∏–≤ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π",
    color: "from-yellow-400 to-orange-600"
  }
]

export default function CatTournament({ ownedCats, playerCoins, onTournamentWin, onCatExperience }: CatTournamentProps) {
  const [selectedCat, setSelectedCat] = useState<Cat | null>(null)
  const [selectedTournament, setSelectedTournament] = useState<Tournament | null>(null)
  const [currentFight, setCurrentFight] = useState(0)
  const [isInTournament, setIsInTournament] = useState(false)
  const [battleLog, setBattleLog] = useState<string[]>([])
  const [isAutoFighting, setIsAutoFighting] = useState(false)
  const [fightResult, setFightResult] = useState<'win' | 'lose' | null>(null)
  const [tournamentComplete, setTournamentComplete] = useState(false)

  // –ë–æ–µ–≤–∞—è –ª–æ–≥–∏–∫–∞
  const calculateDamage = (attacker: any, defender: any): number => {
    const baseDamage = Math.max(1, attacker.attack - Math.floor(defender.defense / 2))
    const variance = Math.random() * 0.4 - 0.2 // ¬±20% –≤–∞—Ä–∏–∞—Ü–∏—è
    return Math.floor(baseDamage * (1 + variance))
  }

  const fight = () => {
    if (!selectedCat || !selectedTournament || tournamentComplete) return

    const enemy = { ...selectedTournament.enemies[currentFight] }
    let catHealth = selectedCat.currentHealth
    let enemyHealth = enemy.health
    const newLog: string[] = []

    newLog.push(`ü•ä ${selectedCat.name} vs ${enemy.name} (${enemy.emoji})`)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
    const catGoesFirst = selectedCat.currentSpeed >= enemy.speed

    while (catHealth > 0 && enemyHealth > 0) {
      if (catGoesFirst) {
        // –•–æ–¥ –∫–æ—Ç–∞
        const damage = calculateDamage(selectedCat, enemy)
        enemyHealth = Math.max(0, enemyHealth - damage)
        newLog.push(`üí• ${selectedCat.name}: ${damage} —É—Ä–æ–Ω–∞ ‚Üí ${enemy.name} (${enemyHealth}/${enemy.maxHealth} HP)`)
        
        if (enemyHealth <= 0) break
        
        // –•–æ–¥ –≤—Ä–∞–≥–∞
        const enemyDamage = calculateDamage(enemy, selectedCat)
        catHealth = Math.max(0, catHealth - enemyDamage)
        newLog.push(`üí¢ ${enemy.name}: ${enemyDamage} —É—Ä–æ–Ω–∞ ‚Üí ${selectedCat.name} (${catHealth}/${selectedCat.maxHealth} HP)`)
      } else {
        // –•–æ–¥ –≤—Ä–∞–≥–∞
        const enemyDamage = calculateDamage(enemy, selectedCat)
        catHealth = Math.max(0, catHealth - enemyDamage)
        newLog.push(`üí¢ ${enemy.name}: ${enemyDamage} —É—Ä–æ–Ω–∞ ‚Üí ${selectedCat.name} (${catHealth}/${selectedCat.maxHealth} HP)`)
        
        if (catHealth <= 0) break
        
        // –•–æ–¥ –∫–æ—Ç–∞
        const damage = calculateDamage(selectedCat, enemy)
        enemyHealth = Math.max(0, enemyHealth - damage)
        newLog.push(`üí• ${selectedCat.name}: ${damage} —É—Ä–æ–Ω–∞ ‚Üí ${enemy.name} (${enemyHealth}/${enemy.maxHealth} HP)`)
      }
    }

    if (catHealth > 0) {
      // –ü–æ–±–µ–¥–∞
      newLog.push(`üéâ ${selectedCat.name} –ø–æ–±–µ–∂–¥–∞–µ—Ç! +${enemy.reward} –º–æ–Ω–µ—Ç, +${enemy.experience} –æ–ø—ã—Ç–∞`)
      onCatExperience(selectedCat.id, enemy.experience)
      
      if (currentFight < selectedTournament.enemies.length - 1) {
        // –°–ª–µ–¥—É—é—â–∏–π –±–æ–π
        setCurrentFight(currentFight + 1)
        newLog.push(`‚ö° –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫...`)
      } else {
        // –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω
        newLog.push(`üëë –¢–£–†–ù–ò–† –ó–ê–í–ï–†–®–Å–ù! –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: +${selectedTournament.finalReward} –º–æ–Ω–µ—Ç!`)
        onTournamentWin(selectedTournament.finalReward + selectedTournament.enemies.reduce((sum, e) => sum + e.reward, 0), 
                        selectedTournament.enemies.reduce((sum, e) => sum + e.experience, 0))
        setTournamentComplete(true)
      }
      setFightResult('win')
    } else {
      // –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
      newLog.push(`üíÄ ${selectedCat.name} –ø–æ–±–µ–∂–¥—ë–Ω! –¢—É—Ä–Ω–∏—Ä –æ–∫–æ–Ω—á–µ–Ω.`)
      setFightResult('lose')
      setTournamentComplete(true)
    }

    setBattleLog(prev => [...prev, ...newLog])
  }

  const startTournament = () => {
    if (!selectedCat || !selectedTournament) return
    setIsInTournament(true)
    setCurrentFight(0)
    setBattleLog([])
    setFightResult(null)
    setTournamentComplete(false)
  }

  const resetTournament = () => {
    setIsInTournament(false)
    setSelectedTournament(null)
    setSelectedCat(null)
    setCurrentFight(0)
    setBattleLog([])
    setFightResult(null)
    setTournamentComplete(false)
  }

  const autoFight = () => {
    setIsAutoFighting(true)
    const fightInterval = setInterval(() => {
      fight()
      if (fightResult === 'lose' || tournamentComplete) {
        setIsAutoFighting(false)
        clearInterval(fightInterval)
      }
    }, 2000)
  }

  useEffect(() => {
    if (tournamentComplete) {
      setIsAutoFighting(false)
    }
  }, [tournamentComplete])

  if (isInTournament && selectedTournament && selectedCat) {
    const currentEnemy = selectedTournament.enemies[currentFight]
    const progress = ((currentFight + (fightResult === 'win' ? 1 : 0)) / selectedTournament.enemies.length) * 100

    return (
      <div className="space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—É—Ä–Ω–∏—Ä–∞ */}
        <Card className={`bg-gradient-to-r ${selectedTournament.color} text-white`}>
          <CardHeader>
            <CardTitle className="text-2xl flex items-center gap-3">
              <span className="text-3xl">{selectedTournament.emoji}</span>
              {selectedTournament.name}
            </CardTitle>
            <Progress value={progress} className="bg-white/20" />
            <p className="opacity-90">
              –ë–æ–π {currentFight + 1} –∏–∑ {selectedTournament.enemies.length}
              {!tournamentComplete && ` ‚Ä¢ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫: ${currentEnemy?.name}`}
            </p>
          </CardHeader>
        </Card>

        {/* –ë–æ–µ–≤–∞—è –∞—Ä–µ–Ω–∞ */}
        {!tournamentComplete && currentEnemy && (
          <Card>
            <CardHeader>
              <CardTitle className="text-center">–ë–æ–π—Ü–æ–≤—Å–∫–∞—è –ê—Ä–µ–Ω–∞</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 gap-8 mb-6">
                {/* –ö–æ—Ç –∏–≥—Ä–æ–∫–∞ */}
                <div className="text-center space-y-2">
                  <div className="text-4xl">{selectedCat.emoji}</div>
                  <h3 className="font-semibold">{selectedCat.name}</h3>
                  <div className="text-sm text-gray-600">–£—Ä–æ–≤–µ–Ω—å {selectedCat.level}</div>
                  <div className="text-xs space-y-1">
                    <div>‚öîÔ∏è {selectedCat.currentAttack} üõ°Ô∏è {selectedCat.currentDefense}</div>
                    <div>‚ù§Ô∏è {selectedCat.currentHealth} ‚ö° {selectedCat.currentSpeed}</div>
                  </div>
                </div>

                <div className="flex items-center justify-center text-2xl">VS</div>

                {/* –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ */}
                <div className="text-center space-y-2">
                  <div className="text-4xl">{currentEnemy.emoji}</div>
                  <h3 className="font-semibold">{currentEnemy.name}</h3>
                  <div className="text-sm text-gray-600">–£—Ä–æ–≤–µ–Ω—å {currentEnemy.level}</div>
                  <div className="text-xs space-y-1">
                    <div>‚öîÔ∏è {currentEnemy.attack} üõ°Ô∏è {currentEnemy.defense}</div>
                    <div>‚ù§Ô∏è {currentEnemy.health} ‚ö° {currentEnemy.speed}</div>
                  </div>
                </div>
              </div>

              <div className="flex justify-center gap-4">
                <Button 
                  onClick={fight} 
                  disabled={isAutoFighting}
                  className="bg-red-600 hover:bg-red-700"
                >
                  <Icon name="Sword" size={16} />
                  –ê—Ç–∞–∫–æ–≤–∞—Ç—å
                </Button>
                <Button 
                  onClick={autoFight}
                  disabled={isAutoFighting}
                  variant="outline"
                >
                  <Icon name="Play" size={16} />
                  –ê–≤—Ç–æ-–±–æ–π
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ */}
        {tournamentComplete && (
          <Card className={fightResult === 'win' ? 'border-green-500' : 'border-red-500'}>
            <CardContent className="text-center py-8">
              {fightResult === 'win' ? (
                <div className="space-y-4">
                  <div className="text-6xl">üèÜ</div>
                  <h2 className="text-2xl font-bold text-green-600">–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!</h2>
                  <p className="text-lg">
                    {selectedCat.name} ‚Äî –Ω–æ–≤—ã–π —á–µ–º–ø–∏–æ–Ω {selectedTournament.name}!
                  </p>
                  <div className="text-xl">
                    üí∞ –û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {selectedTournament.finalReward + selectedTournament.enemies.reduce((sum, e) => sum + e.reward, 0)} –º–æ–Ω–µ—Ç
                  </div>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="text-6xl">üíÄ</div>
                  <h2 className="text-2xl font-bold text-red-600">–¢—É—Ä–Ω–∏—Ä –ø—Ä–æ–≤–∞–ª–µ–Ω</h2>
                  <p className="text-lg">
                    {selectedCat.name} –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–π—Ç–∏ {selectedTournament.name}
                  </p>
                  <p className="text-sm text-gray-600">
                    –ü—Ä–æ–π–¥–µ–Ω–æ –±–æ—ë–≤: {currentFight} –∏–∑ {selectedTournament.enemies.length}
                  </p>
                </div>
              )}
              <Button onClick={resetTournament} className="mt-4">
                <Icon name="RotateCcw" size={16} />
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
              </Button>
            </CardContent>
          </Card>
        )}

        {/* –õ–æ–≥ –±–æ—è */}
        {battleLog.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Icon name="ScrollText" size={20} />
                –õ–æ–≥ —Ç—É—Ä–Ω–∏—Ä–∞
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm max-h-64 overflow-y-auto space-y-1">
                {battleLog.map((log, index) => (
                  <div key={index}>{log}</div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold mb-2">üèÜ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –¢—É—Ä–Ω–∏—Ä—ã</h1>
        <p className="text-gray-600">–ü—Ä–æ—Ö–æ–¥–∏ —Å–µ—Ä–∏—é –±–æ—ë–≤ –∏ –ø–æ–ª—É—á–∞–π –∫—Ä—É—Ç—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!</p>
      </div>

      {/* –í—ã–±–æ—Ä –∫–æ—Ç–∞ */}
      {!selectedCat && (
        <Card>
          <CardHeader>
            <CardTitle>–í—ã–±–µ—Ä–∏ –∫–æ—Ç–∞-–±–æ–π—Ü–∞</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {ownedCats.length === 0 ? (
                <p className="col-span-full text-center text-gray-500">
                  –£ —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
                </p>
              ) : (
                ownedCats.map((cat) => (
                  <Button
                    key={cat.id}
                    onClick={() => setSelectedCat(cat)}
                    variant="outline"
                    className="h-auto flex-col p-4 space-y-2"
                  >
                    <div className="text-3xl">{cat.emoji}</div>
                    <div className="font-semibold">{cat.name}</div>
                    <div className="text-sm text-gray-600">–£—Ä. {cat.level}</div>
                    <div className="text-xs">
                      ‚öîÔ∏è{cat.currentAttack} üõ°Ô∏è{cat.currentDefense} ‚ù§Ô∏è{cat.currentHealth} ‚ö°{cat.currentSpeed}
                    </div>
                  </Button>
                ))
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* –í—ã–±–æ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ */}
      {selectedCat && !selectedTournament && (
        <div className="space-y-4">
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="text-2xl">{selectedCat.emoji}</div>
                  <div>
                    <div className="font-semibold">{selectedCat.name}</div>
                    <div className="text-sm text-gray-600">–£—Ä–æ–≤–µ–Ω—å {selectedCat.level}</div>
                  </div>
                </div>
                <Button variant="outline" onClick={() => setSelectedCat(null)}>
                  –°–º–µ–Ω–∏—Ç—å –∫–æ—Ç–∞
                </Button>
              </div>
            </CardContent>
          </Card>

          <div className="space-y-4">
            <h2 className="text-xl font-semibold">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã</h2>
            {tournaments.map((tournament) => {
              const canEnter = selectedCat.level >= tournament.requiredLevel
              
              return (
                <Card 
                  key={tournament.name}
                  className={`cursor-pointer transition-all ${
                    canEnter 
                      ? 'hover:shadow-lg border-2 border-transparent hover:border-blue-500' 
                      : 'opacity-50 cursor-not-allowed'
                  }`}
                  onClick={() => canEnter && setSelectedTournament(tournament)}
                >
                  <CardContent className="pt-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="text-4xl">{tournament.emoji}</div>
                        <div>
                          <h3 className="text-lg font-semibold">{tournament.name}</h3>
                          <p className="text-sm text-gray-600">{tournament.description}</p>
                          <div className="flex items-center gap-4 text-sm mt-1">
                            <span className="text-red-600">
                              –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å {tournament.requiredLevel}
                            </span>
                            <span className="text-yellow-600">
                              üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {tournament.finalReward}
                            </span>
                          </div>
                        </div>
                      </div>
                      {canEnter ? (
                        <Button 
                          onClick={(e) => {
                            e.stopPropagation()
                            setSelectedTournament(tournament)
                          }}
                          className={`bg-gradient-to-r ${tournament.color} text-white`}
                        >
                          –í–æ–π—Ç–∏ –≤ —Ç—É—Ä–Ω–∏—Ä
                        </Button>
                      ) : (
                        <div className="text-red-500 font-semibold">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        </div>
      )}

      {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ */}
      {selectedTournament && selectedCat && !isInTournament && (
        <Card className={`bg-gradient-to-r ${selectedTournament.color} text-white`}>
          <CardHeader>
            <CardTitle className="flex items-center gap-3">
              <span className="text-3xl">{selectedTournament.emoji}</span>
              {selectedTournament.name}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <p className="text-lg">{selectedTournament.description}</p>
              
              <div className="space-y-2">
                <h4 className="font-semibold">–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏:</h4>
                {selectedTournament.enemies.map((enemy, index) => (
                  <div key={index} className="flex items-center justify-between bg-white/20 rounded p-2">
                    <div className="flex items-center gap-2">
                      <span>{enemy.emoji}</span>
                      <span>{enemy.name}</span>
                      <span className="text-sm opacity-75">(–£—Ä. {enemy.level})</span>
                    </div>
                    <div className="text-sm">
                      üí∞ {enemy.reward} + ‚≠ê {enemy.experience}
                    </div>
                  </div>
                ))}
              </div>

              <div className="bg-white/20 rounded p-3">
                <div className="text-lg font-semibold">
                  üèÜ –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {selectedTournament.finalReward} –º–æ–Ω–µ—Ç
                </div>
                <div className="text-sm opacity-90">
                  –û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {selectedTournament.finalReward + selectedTournament.enemies.reduce((sum, e) => sum + e.reward, 0)} –º–æ–Ω–µ—Ç
                </div>
              </div>

              <div className="flex gap-4">
                <Button 
                  onClick={startTournament}
                  size="lg"
                  className="bg-white text-gray-900 hover:bg-gray-100"
                >
                  <Icon name="Play" size={20} />
                  –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
                </Button>
                <Button 
                  variant="outline" 
                  onClick={() => setSelectedTournament(null)}
                  className="border-white text-white hover:bg-white/20"
                >
                  –ù–∞–∑–∞–¥
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}