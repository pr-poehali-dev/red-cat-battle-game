import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import Icon from '@/components/ui/icon'
import type { Cat } from '@/types/game'

interface SeasonalReward {
  id: string
  name: string
  type: 'cat' | 'coins' | 'item' | 'title'
  value: any
  rarity: 'common' | 'rare' | 'epic' | 'legendary'
  description: string
}

interface SeasonalTournament {
  id: string
  name: string
  description: string
  theme: string
  startDate: Date
  endDate: Date
  isActive: boolean
  entry_fee: number
  rewards: SeasonalReward[]
  participants: number
  maxParticipants: number
  difficulty: 'easy' | 'medium' | 'hard' | 'nightmare'
  specialRules?: string[]
}

interface SeasonalTournamentProps {
  ownedCats: Cat[]
  playerCoins: number
  onTournamentWin: (reward: number) => void
  onRewardEarned: (reward: SeasonalReward) => void
}

const SEASONAL_TOURNAMENTS: SeasonalTournament[] = [
  {
    id: 'winter_cosmic',
    name: '‚ùÑÔ∏è –ó–∏–º–Ω–∏–π –ö–æ—Å–º–æ—Å',
    description: '–°—Ä–∞–∂–∞–π—Å—è –≤ –ª–µ–¥—è–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö –∫–æ—Å–º–æ—Å–∞!',
    theme: 'winter',
    startDate: new Date('2024-12-01'),
    endDate: new Date('2024-12-31'),
    isActive: true,
    entry_fee: 500,
    participants: 1247,
    maxParticipants: 5000,
    difficulty: 'hard',
    specialRules: ['–£—Ä–æ–Ω –ª—å–¥–æ–º —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 50%', '–ö–∞–∂–¥—ã–π 3-–π —Ö–æ–¥ - –∑–∞–º–æ—Ä–æ–∑–∫–∞'],
    rewards: [
      {
        id: 'ice_cat',
        name: 'üßä –õ–µ–¥—è–Ω–æ–π –ö–æ—Ç',
        type: 'cat',
        value: {
          id: 'ice_cosmic_cat',
          name: '–õ–µ–¥—è–Ω–æ–π –ö–æ—Å–º–æ–∫–æ—Ç',
          power: 85,
          rarity: 'legendary',
          image: 'üßä',
          specialAbility: '–õ–µ–¥—è–Ω–æ–π —É–¥–∞—Ä'
        },
        rarity: 'legendary',
        description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–æ—Ç —Å —Å–∏–ª–æ–π –≤–µ—á–Ω–æ–≥–æ –ª—å–¥–∞'
      },
      {
        id: 'winter_coins',
        name: '‚ùÑÔ∏è –ó–∏–º–Ω–∏–µ –ú–æ–Ω–µ—Ç—ã',
        type: 'coins',
        value: 5000,
        rarity: 'epic',
        description: '5000 —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∑–∏–º–Ω–∏—Ö –º–æ–Ω–µ—Ç'
      },
      {
        id: 'ice_crown',
        name: 'üëë –õ–µ–¥—è–Ω–∞—è –ö–æ—Ä–æ–Ω–∞',
        type: 'item',
        value: { name: '–õ–µ–¥—è–Ω–∞—è –ö–æ—Ä–æ–Ω–∞', power: +15 },
        rarity: 'epic',
        description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –≤—Å–µ—Ö –∫–æ—Ç–æ–≤ –Ω–∞ 15%'
      }
    ]
  },
  {
    id: 'spring_bloom',
    name: 'üå∏ –ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –¶–≤–µ—Ç–µ–Ω–∏–µ',
    description: '–í–µ—Å–µ–Ω–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä —Å—Ä–µ–¥–∏ —Ü–≤–µ—Ç—É—â–∏—Ö –ø–ª–∞–Ω–µ—Ç!',
    theme: 'spring',
    startDate: new Date('2024-03-01'),
    endDate: new Date('2024-03-31'),
    isActive: false,
    entry_fee: 300,
    participants: 2156,
    maxParticipants: 3000,
    difficulty: 'medium',
    specialRules: ['–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è +20% –∫–∞–∂–¥—ã–π —Ö–æ–¥', '–¶–≤–µ—Ç–æ—á–Ω–∞—è –º–∞–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞'],
    rewards: [
      {
        id: 'bloom_cat',
        name: 'üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–π –ö–æ—Ç',
        type: 'cat',
        value: {
          id: 'bloom_cosmic_cat',
          name: '–¶–≤–µ—Ç–æ—á–Ω—ã–π –ö–æ—Å–º–æ–∫–æ—Ç',
          power: 75,
          rarity: 'epic',
          image: 'üå∏',
          specialAbility: '–¶–≤–µ—Ç–æ—á–Ω–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ'
        },
        rarity: 'epic',
        description: '–≠–ø–∏—á–µ—Å–∫–∏–π –∫–æ—Ç —Å —Å–∏–ª–æ–π –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Ü–≤–µ—Ç–µ–Ω–∏—è'
      }
    ]
  },
  {
    id: 'summer_solar',
    name: '‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω—ã–π –®—Ç–æ—Ä–º',
    description: '–°—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ –ø–∞–ª—è—â–∏–º–∏ —Å–æ–ª–Ω–µ—á–Ω—ã–º–∏ –ª—É—á–∞–º–∏!',
    theme: 'summer',
    startDate: new Date('2024-06-01'),
    endDate: new Date('2024-08-31'),
    isActive: true,
    entry_fee: 750,
    participants: 892,
    maxParticipants: 2500,
    difficulty: 'nightmare',
    specialRules: ['–°–æ–ª–Ω–µ—á–Ω—ã–π —É—Ä–æ–Ω x2', '–û–≥–Ω–µ–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã'],
    rewards: [
      {
        id: 'solar_cat',
        name: '‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω—ã–π –ö–æ—Ç',
        type: 'cat',
        value: {
          id: 'solar_cosmic_cat',
          name: '–°–æ–ª–Ω–µ—á–Ω—ã–π –ö–æ—Å–º–æ–∫–æ—Ç',
          power: 95,
          rarity: 'legendary',
          image: '‚òÄÔ∏è',
          specialAbility: '–°–æ–ª–Ω–µ—á–Ω–∞—è –≤—Å–ø—ã—à–∫–∞'
        },
        rarity: 'legendary',
        description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–æ—Ç —Å –º–æ—â—å—é –∑–≤–µ–∑–¥—ã'
      },
      {
        id: 'solar_title',
        name: 'üî• –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –°–æ–ª–Ω—Ü–∞',
        type: 'title',
        value: '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –°–æ–ª–Ω—Ü–∞',
        rarity: 'legendary',
        description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–∏—Ç—É–ª —á–µ–º–ø–∏–æ–Ω–∞'
      }
    ]
  }
]

const RARITY_COLORS = {
  common: 'from-gray-400 to-gray-600',
  rare: 'from-blue-400 to-blue-600', 
  epic: 'from-purple-400 to-purple-600',
  legendary: 'from-yellow-400 to-yellow-600'
}

export default function SeasonalTournament({ ownedCats, playerCoins, onTournamentWin, onRewardEarned }: SeasonalTournamentProps) {
  const [selectedTournament, setSelectedTournament] = useState<SeasonalTournament | null>(null)
  const [isParticipating, setIsParticipating] = useState(false)
  const [tournamentProgress, setTournamentProgress] = useState(0)
  const [timeLeft, setTimeLeft] = useState<string>('')

  useEffect(() => {
    const timer = setInterval(() => {
      SEASONAL_TOURNAMENTS.forEach(tournament => {
        if (tournament.isActive) {
          const now = new Date().getTime()
          const end = tournament.endDate.getTime()
          const distance = end - now
          
          if (distance > 0) {
            const days = Math.floor(distance / (1000 * 60 * 60 * 24))
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))
            
            setTimeLeft(`${days}–¥ ${hours}—á ${minutes}–º`)
          } else {
            setTimeLeft('–ó–∞–≤–µ—Ä—à—ë–Ω')
          }
        }
      })
    }, 60000)

    return () => clearInterval(timer)
  }, [])

  const handleJoinTournament = (tournament: SeasonalTournament) => {
    if (playerCoins >= tournament.entry_fee && !isParticipating) {
      setSelectedTournament(tournament)
      setIsParticipating(true)
      setTournamentProgress(0)
      onTournamentWin(-tournament.entry_fee) // –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–Ω–æ—Å
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
      const progressTimer = setInterval(() => {
        setTournamentProgress(prev => {
          if (prev >= 100) {
            clearInterval(progressTimer)
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
            const winChance = Math.random()
            let earnedRewards: SeasonalReward[] = []
            
            if (winChance > 0.3) { // 70% —à–∞–Ω—Å –Ω–∞ –Ω–∞–≥—Ä–∞–¥—É
              if (winChance > 0.85) { // 15% —à–∞–Ω—Å –Ω–∞ –ª—É—á—à—É—é –Ω–∞–≥—Ä–∞–¥—É
                earnedRewards = tournament.rewards.filter(r => r.rarity === 'legendary')
              } else if (winChance > 0.6) { // 25% —à–∞–Ω—Å –Ω–∞ —ç–ø–∏—á–µ—Å–∫—É—é
                earnedRewards = tournament.rewards.filter(r => r.rarity === 'epic')
              } else { // 30% –Ω–∞ –æ–±—ã—á–Ω—É—é
                earnedRewards = tournament.rewards.filter(r => r.rarity === 'rare' || r.rarity === 'common')
              }
              
              earnedRewards.forEach(reward => {
                onRewardEarned(reward)
                if (reward.type === 'coins') {
                  onTournamentWin(reward.value)
                }
              })
            }
            
            setIsParticipating(false)
            setSelectedTournament(null)
            return 100
          }
          return prev + Math.random() * 15 + 5
        })
      }, 800)
    }
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'bg-green-500'
      case 'medium': return 'bg-yellow-500'  
      case 'hard': return 'bg-red-500'
      case 'nightmare': return 'bg-purple-500'
      default: return 'bg-gray-500'
    }
  }

  const getDifficultyText = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return '–õ—ë–≥–∫–∏–π'
      case 'medium': return '–°—Ä–µ–¥–Ω–∏–π'
      case 'hard': return '–°–ª–æ–∂–Ω—ã–π'  
      case 'nightmare': return '–ö–æ—à–º–∞—Ä'
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }
  }

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-400 to-pink-600 bg-clip-text text-transparent mb-2">
          üåü –°–µ–∑–æ–Ω–Ω—ã–µ –¢—É—Ä–Ω–∏—Ä—ã
        </h2>
        <p className="text-gray-300">–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏!</p>
      </div>

      {/* –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ */}
      {isParticipating && selectedTournament && (
        <Card className="border-2 border-purple-500 bg-gradient-to-r from-purple-900/20 to-pink-900/20">
          <CardHeader>
            <CardTitle className="text-center">
              –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {selectedTournament.name}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="text-center">
                <Icon name="Sword" className="w-16 h-16 mx-auto animate-pulse text-purple-400" />
                <p className="text-lg font-semibold mt-2">–°—Ä–∞–∂–µ–Ω–∏—è –∏–¥—É—Ç –ø–æ–ª–Ω—ã–º —Ö–æ–¥–æ–º!</p>
              </div>
              <Progress value={tournamentProgress} className="h-3" />
              <p className="text-center text-sm text-gray-400">
                –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—É—Ä–Ω–∏—Ä–∞: {Math.round(tournamentProgress)}%
              </p>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ */}
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {SEASONAL_TOURNAMENTS.map((tournament) => (
          <Card 
            key={tournament.id} 
            className={`relative overflow-hidden ${tournament.isActive 
              ? 'border-2 border-yellow-500 shadow-lg shadow-yellow-500/20' 
              : 'border-gray-600 opacity-75'
            }`}
          >
            {tournament.isActive && (
              <div className="absolute top-2 right-2">
                <Badge className="bg-green-500 text-white animate-pulse">
                  <Icon name="Clock" size={12} className="mr-1" />
                  {timeLeft}
                </Badge>
              </div>
            )}
            
            <CardHeader>
              <CardTitle className="text-xl">{tournament.name}</CardTitle>
              <p className="text-sm text-gray-300">{tournament.description}</p>
            </CardHeader>
            
            <CardContent className="space-y-4">
              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ */}
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <p className="text-gray-400">–£—á–∞—Å—Ç–Ω–∏–∫–∏</p>
                  <p className="font-semibold">{tournament.participants.toLocaleString()}/{tournament.maxParticipants.toLocaleString()}</p>
                </div>
                <div>
                  <p className="text-gray-400">–í–∑–Ω–æ—Å</p>
                  <p className="font-semibold text-yellow-400">
                    <Icon name="Coins" size={16} className="inline mr-1" />
                    {tournament.entry_fee}
                  </p>
                </div>
              </div>

              {/* –°–ª–æ–∂–Ω–æ—Å—Ç—å */}
              <div className="flex items-center gap-2">
                <Badge className={`${getDifficultyColor(tournament.difficulty)} text-white`}>
                  {getDifficultyText(tournament.difficulty)}
                </Badge>
                <Progress 
                  value={(tournament.participants / tournament.maxParticipants) * 100} 
                  className="flex-1 h-2"
                />
              </div>

              {/* –û—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞ */}
              {tournament.specialRules && tournament.specialRules.length > 0 && (
                <div className="bg-blue-900/20 p-3 rounded-lg">
                  <p className="text-xs font-semibold text-blue-300 mb-1">–û—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞:</p>
                  {tournament.specialRules.map((rule, index) => (
                    <p key={index} className="text-xs text-blue-200">‚Ä¢ {rule}</p>
                  ))}
                </div>
              )}

              {/* –ù–∞–≥—Ä–∞–¥—ã */}
              <div>
                <p className="text-sm font-semibold mb-2 text-purple-300">
                  <Icon name="Gift" size={16} className="inline mr-1" />
                  –ù–∞–≥—Ä–∞–¥—ã:
                </p>
                <div className="space-y-2">
                  {tournament.rewards.slice(0, 2).map((reward) => (
                    <div 
                      key={reward.id}
                      className={`p-2 rounded-lg bg-gradient-to-r ${RARITY_COLORS[reward.rarity]} bg-opacity-20`}
                    >
                      <p className="text-sm font-semibold">{reward.name}</p>
                      <p className="text-xs text-gray-300">{reward.description}</p>
                    </div>
                  ))}
                  {tournament.rewards.length > 2 && (
                    <p className="text-xs text-gray-400">
                      –ò –µ—â—ë {tournament.rewards.length - 2} –Ω–∞–≥—Ä–∞–¥...
                    </p>
                  )}
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ —É—á–∞—Å—Ç–∏—è */}
              <Button
                onClick={() => handleJoinTournament(tournament)}
                disabled={!tournament.isActive || isParticipating || playerCoins < tournament.entry_fee}
                className={`w-full ${tournament.isActive && !isParticipating && playerCoins >= tournament.entry_fee
                  ? 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700'
                  : 'bg-gray-600'
                }`}
              >
                {!tournament.isActive ? (
                  <>
                    <Icon name="Clock" size={16} className="mr-2" />
                    –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω
                  </>
                ) : isParticipating ? (
                  <>
                    <Icon name="Sword" size={16} className="mr-2" />
                    –£—á–∞—Å—Ç–≤—É—é –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                  </>
                ) : playerCoins < tournament.entry_fee ? (
                  <>
                    <Icon name="X" size={16} className="mr-2" />
                    –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç
                  </>
                ) : (
                  <>
                    <Icon name="Zap" size={16} className="mr-2" />
                    –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ({tournament.entry_fee} –º–æ–Ω–µ—Ç)
                  </>
                )}
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <Card className="bg-gradient-to-r from-indigo-900/20 to-purple-900/20">
        <CardContent className="p-6">
          <div className="flex items-start gap-4">
            <Icon name="Info" className="w-8 h-8 text-blue-400 mt-1" />
            <div>
              <h3 className="text-lg font-bold text-blue-300 mb-2">–û —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö</h3>
              <div className="space-y-2 text-sm text-gray-300">
                <p>‚Ä¢ <strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</strong> –ö–∞–∂–¥—ã–π —Å–µ–∑–æ–Ω–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
                <p>‚Ä¢ <strong>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:</strong> –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–æ—Ç—ã, –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–∏—Ç—É–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –æ–±—ã—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö</p>
                <p>‚Ä¢ <strong>–û—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞:</strong> –ö–∞–∂–¥—ã–π —Ç—É—Ä–Ω–∏—Ä –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º–µ—Ö–∞–Ω–∏–∫—É —Å—Ä–∞–∂–µ–Ω–∏–π</p>
                <p>‚Ä¢ <strong>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:</strong> –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ</p>
                <p>‚Ä¢ <strong>–í—ã—Å–æ–∫–∏–µ —Å—Ç–∞–≤–∫–∏:</strong> –ë–æ–ª—å—à–∏–π –≤–∑–Ω–æ—Å = –ª—É—á—à–∏–µ –Ω–∞–≥—Ä–∞–¥—ã</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}