import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import Icon from '@/components/ui/icon'
import type { Cat } from '@/types/game'

export interface PlayerRank {
  name: string
  level: number
  minPoints: number
  maxPoints: number
  color: string
  emoji: string
  benefits: string[]
}

export interface PlayerStats {
  totalTournaments: number
  tournamentsWon: number
  totalFights: number
  fightsWon: number
  totalCoinsEarned: number
  currentRankPoints: number
  bestCat: string
  longestWinStreak: number
  currentWinStreak: number
}

export interface LeaderboardEntry {
  playerName: string
  rankPoints: number
  tournamentsWon: number
  winRate: number
  rank: PlayerRank
  avatar: string
}

export const ranks: PlayerRank[] = [
  {
    name: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ù–æ–≤–∏—á–æ–∫",
    level: 1,
    minPoints: 0,
    maxPoints: 99,
    color: "from-gray-400 to-gray-600",
    emoji: "üêæ",
    benefits: ["–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–æ–≤—ã–º —Ç—É—Ä–Ω–∏—Ä–∞–º"]
  },
  {
    name: "–ó–≤—ë–∑–¥–Ω—ã–π –ë–æ–µ—Ü",
    level: 2,
    minPoints: 100,
    maxPoints: 299,
    color: "from-blue-400 to-blue-600",
    emoji: "‚≠ê",
    benefits: ["–ë–æ–Ω—É—Å +5% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º", "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ç—É—Ä–Ω–∏—Ä–∞–º"]
  },
  {
    name: "–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –í–æ–∏–Ω",
    level: 3,
    minPoints: 300,
    maxPoints: 599,
    color: "from-purple-400 to-purple-600",
    emoji: "üåå",
    benefits: ["–ë–æ–Ω—É—Å +10% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º", "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã", "–û—Å–æ–±—ã–µ –∫–æ—Ç—ã"]
  },
  {
    name: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ß–µ–º–ø–∏–æ–Ω",
    level: 4,
    minPoints: 600,
    maxPoints: 999,
    color: "from-yellow-400 to-orange-500",
    emoji: "üëë",
    benefits: ["–ë–æ–Ω—É—Å +15% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º", "–¢—É—Ä–Ω–∏—Ä—ã —á–µ–º–ø–∏–æ–Ω–æ–≤", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã"]
  },
  {
    name: "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –í—Å–µ–ª–µ–Ω–Ω–æ–π",
    level: 5,
    minPoints: 1000,
    maxPoints: 9999,
    color: "from-pink-500 to-red-600",
    emoji: "üíé",
    benefits: ["–ë–æ–Ω—É—Å +25% –∫ –Ω–∞–≥—Ä–∞–¥–∞–º", "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–æ—Ç—ã", "–¢–∏—Ç—É–ª –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞—Ö"]
  }
]

// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
const mockLeaderboard: LeaderboardEntry[] = [
  { playerName: "–ö–æ—Å–º–æ–ö–æ—Ç2024", rankPoints: 1250, tournamentsWon: 45, winRate: 89, rank: ranks[4], avatar: "üöÄ" },
  { playerName: "–ó–≤—ë–∑–¥–Ω—ã–π–í–æ–∏–Ω", rankPoints: 980, tournamentsWon: 38, winRate: 85, rank: ranks[3], avatar: "‚öîÔ∏è" },
  { playerName: "–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π–õ–æ—Ä–¥", rankPoints: 875, tournamentsWon: 32, winRate: 82, rank: ranks[3], avatar: "üåü" },
  { playerName: "–ö–≤–∞–Ω—Ç–æ–≤—ã–π–ë–æ–µ—Ü", rankPoints: 720, tournamentsWon: 29, winRate: 78, rank: ranks[3], avatar: "‚ö°" },
  { playerName: "–ù–µ–π—Ç—Ä–æ–Ω–Ω—ã–π–ù–∏–Ω–¥–∑—è", rankPoints: 650, tournamentsWon: 25, winRate: 75, rank: ranks[3], avatar: "ü•∑" },
  { playerName: "–ü–ª–∞–∑–º–µ–Ω–Ω—ã–π–ü–∏–ª–æ—Ç", rankPoints: 580, tournamentsWon: 22, winRate: 73, rank: ranks[2], avatar: "üõ∏" },
  { playerName: "–ê—Å—Ç–µ—Ä–æ–∏–¥–Ω—ã–π–ê—Å", rankPoints: 420, tournamentsWon: 18, winRate: 70, rank: ranks[2], avatar: "‚òÑÔ∏è" },
  { playerName: "–ö–æ–º–µ—Ç–Ω—ã–π–ö–∞–ø–∏—Ç–∞–Ω", rankPoints: 350, tournamentsWon: 15, winRate: 68, rank: ranks[2], avatar: "üå†" },
  { playerName: "–°–æ–ª–Ω–µ—á–Ω—ã–π–°—Ç—Ä–∞—Ç–µ–≥", rankPoints: 250, tournamentsWon: 12, winRate: 65, rank: ranks[1], avatar: "‚òÄÔ∏è" },
  { playerName: "–õ—É–Ω–Ω—ã–π–õ–µ–≥–∏–æ–Ω–µ—Ä", rankPoints: 180, tournamentsWon: 8, winRate: 60, rank: ranks[1], avatar: "üåô" }
]

interface RankingSystemProps {
  playerStats: PlayerStats
  playerName: string
  onBack: () => void
}

export function getCurrentRank(points: number): PlayerRank {
  for (let i = ranks.length - 1; i >= 0; i--) {
    if (points >= ranks[i].minPoints) {
      return ranks[i]
    }
  }
  return ranks[0]
}

export function getNextRank(currentRank: PlayerRank): PlayerRank | null {
  const currentIndex = ranks.findIndex(r => r.level === currentRank.level)
  return currentIndex < ranks.length - 1 ? ranks[currentIndex + 1] : null
}

export function calculateRankProgress(points: number, rank: PlayerRank): number {
  if (rank.level === ranks.length) return 100
  const progress = ((points - rank.minPoints) / (rank.maxPoints - rank.minPoints)) * 100
  return Math.min(100, Math.max(0, progress))
}

export default function RankingSystem({ playerStats, playerName, onBack }: RankingSystemProps) {
  const [activeTab, setActiveTab] = useState<'profile' | 'leaderboard' | 'ranks'>('profile')
  
  const currentRank = getCurrentRank(playerStats.currentRankPoints)
  const nextRank = getNextRank(currentRank)
  const progress = calculateRankProgress(playerStats.currentRankPoints, currentRank)

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
  const playerEntry: LeaderboardEntry = {
    playerName: playerName || "–¢—ã",
    rankPoints: playerStats.currentRankPoints,
    tournamentsWon: playerStats.tournamentsWon,
    winRate: playerStats.totalFights > 0 ? Math.round((playerStats.fightsWon / playerStats.totalFights) * 100) : 0,
    rank: currentRank,
    avatar: "üò∫"
  }

  const fullLeaderboard = [...mockLeaderboard, playerEntry]
    .sort((a, b) => b.rankPoints - a.rankPoints)
    .map((entry, index) => ({ ...entry, position: index + 1 }))

  const playerPosition = fullLeaderboard.findIndex(entry => entry.playerName === playerEntry.playerName) + 1

  if (activeTab === 'profile') {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4 mb-6">
          <Button variant="outline" onClick={onBack}>
            <Icon name="ArrowLeft" size={16} />
            –ù–∞–∑–∞–¥
          </Button>
          <h1 className="text-2xl font-bold">–ü—Ä–æ—Ñ–∏–ª—å –±–æ–π—Ü–∞</h1>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <Button
            onClick={() => setActiveTab('profile')}
            className={activeTab === 'profile' ? 'bg-blue-600' : ''}
          >
            <Icon name="User" size={16} />
            –ü—Ä–æ—Ñ–∏–ª—å
          </Button>
          <Button
            onClick={() => setActiveTab('leaderboard')}
            className={activeTab === 'leaderboard' ? 'bg-blue-600' : ''}
          >
            <Icon name="Trophy" size={16} />
            –õ–∏–¥–µ—Ä–±–æ—Ä–¥
          </Button>
          <Button
            onClick={() => setActiveTab('ranks')}
            className={activeTab === 'ranks' ? 'bg-blue-600' : ''}
          >
            <Icon name="Award" size={16} />
            –†–∞–Ω–≥–∏
          </Button>
        </div>

        {/* –¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ */}
        <Card className={`bg-gradient-to-r ${currentRank.color} text-white`}>
          <CardHeader>
            <CardTitle className="flex items-center gap-3">
              <span className="text-3xl">{currentRank.emoji}</span>
              <div>
                <div className="text-xl">{currentRank.name}</div>
                <div className="text-sm opacity-90">–†–∞–Ω–≥ {currentRank.level}</div>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <div className="flex justify-between text-sm mb-1">
                  <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞</span>
                  <span>{Math.round(progress)}%</span>
                </div>
                <Progress value={progress} className="bg-white/20" />
                <div className="flex justify-between text-xs mt-1 opacity-75">
                  <span>{playerStats.currentRankPoints} –æ—á–∫–æ–≤</span>
                  <span>{nextRank ? `${nextRank.maxPoints} –¥–ª—è ${nextRank.name}` : '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥'}</span>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold">{playerPosition}</div>
                  <div className="text-sm opacity-90">–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold">{playerStats.currentRankPoints}</div>
                  <div className="text-sm opacity-90">–û—á–∫–æ–≤ —Ä–∞–Ω–≥–∞</div>
                </div>
              </div>

              <div>
                <h4 className="font-semibold mb-2">–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ —Ä–∞–Ω–≥–∞:</h4>
                <ul className="space-y-1 text-sm">
                  {currentRank.benefits.map((benefit, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <Icon name="Check" size={14} />
                      {benefit}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <Card>
            <CardContent className="text-center pt-6">
              <div className="text-2xl font-bold text-blue-600">{playerStats.tournamentsWon}</div>
              <div className="text-sm text-gray-600">–ü–æ–±–µ–¥ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="text-center pt-6">
              <div className="text-2xl font-bold text-green-600">
                {playerStats.totalFights > 0 ? Math.round((playerStats.fightsWon / playerStats.totalFights) * 100) : 0}%
              </div>
              <div className="text-sm text-gray-600">–í–∏–Ω—Ä–µ–π—Ç</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="text-center pt-6">
              <div className="text-2xl font-bold text-yellow-600">{playerStats.totalCoinsEarned}</div>
              <div className="text-sm text-gray-600">–ú–æ–Ω–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="text-center pt-6">
              <div className="text-2xl font-bold text-purple-600">{playerStats.longestWinStreak}</div>
              <div className="text-sm text-gray-600">–õ—É—á—à–∞—è —Å–µ—Ä–∏—è</div>
            </CardContent>
          </Card>
        </div>

        {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name="Medal" size={20} />
              –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className={`p-4 rounded-lg border-2 ${playerStats.tournamentsWon >= 1 ? 'border-green-500 bg-green-50' : 'border-gray-300 bg-gray-50'}`}>
                <div className="flex items-center gap-3">
                  <div className="text-2xl">üèÜ</div>
                  <div>
                    <div className="font-semibold">–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞</div>
                    <div className="text-sm text-gray-600">–í—ã–∏–≥—Ä–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä</div>
                  </div>
                </div>
              </div>
              
              <div className={`p-4 rounded-lg border-2 ${playerStats.tournamentsWon >= 10 ? 'border-green-500 bg-green-50' : 'border-gray-300 bg-gray-50'}`}>
                <div className="flex items-center gap-3">
                  <div className="text-2xl">üëë</div>
                  <div>
                    <div className="font-semibold">–ß–µ–º–ø–∏–æ–Ω</div>
                    <div className="text-sm text-gray-600">–í—ã–∏–≥—Ä–∞–π 10 —Ç—É—Ä–Ω–∏—Ä–æ–≤ ({playerStats.tournamentsWon}/10)</div>
                  </div>
                </div>
              </div>

              <div className={`p-4 rounded-lg border-2 ${playerStats.longestWinStreak >= 5 ? 'border-green-500 bg-green-50' : 'border-gray-300 bg-gray-50'}`}>
                <div className="flex items-center gap-3">
                  <div className="text-2xl">üî•</div>
                  <div>
                    <div className="font-semibold">–ì–æ—Ä—è—á–∞—è —Å–µ—Ä–∏—è</div>
                    <div className="text-sm text-gray-600">–°–µ—Ä–∏—è –∏–∑ 5 –ø–æ–±–µ–¥ ({playerStats.longestWinStreak}/5)</div>
                  </div>
                </div>
              </div>

              <div className={`p-4 rounded-lg border-2 ${playerStats.totalCoinsEarned >= 10000 ? 'border-green-500 bg-green-50' : 'border-gray-300 bg-gray-50'}`}>
                <div className="flex items-center gap-3">
                  <div className="text-2xl">üí∞</div>
                  <div>
                    <div className="font-semibold">–ú–∏–ª–ª–∏–æ–Ω–µ—Ä</div>
                    <div className="text-sm text-gray-600">–ó–∞—Ä–∞–±–æ—Ç–∞–π 10,000 –º–æ–Ω–µ—Ç ({playerStats.totalCoinsEarned}/10000)</div>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (activeTab === 'leaderboard') {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4 mb-6">
          <Button variant="outline" onClick={onBack}>
            <Icon name="ArrowLeft" size={16} />
            –ù–∞–∑–∞–¥
          </Button>
          <h1 className="text-2xl font-bold">üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥</h1>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <Button
            onClick={() => setActiveTab('profile')}
            className={activeTab === 'profile' ? 'bg-blue-600' : ''}
          >
            <Icon name="User" size={16} />
            –ü—Ä–æ—Ñ–∏–ª—å
          </Button>
          <Button
            onClick={() => setActiveTab('leaderboard')}
            className={activeTab === 'leaderboard' ? 'bg-blue-600' : ''}
          >
            <Icon name="Trophy" size={16} />
            –õ–∏–¥–µ—Ä–±–æ—Ä–¥
          </Button>
          <Button
            onClick={() => setActiveTab('ranks')}
            className={activeTab === 'ranks' ? 'bg-blue-600' : ''}
          >
            <Icon name="Award" size={16} />
            –†–∞–Ω–≥–∏
          </Button>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>–¢–æ–ø –∏–≥—Ä–æ–∫–∏ –≥–∞–ª–∞–∫—Ç–∏–∫–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {fullLeaderboard.slice(0, 20).map((entry, index) => {
                const isPlayer = entry.playerName === playerEntry.playerName
                return (
                  <div 
                    key={index} 
                    className={`flex items-center justify-between p-3 rounded-lg ${
                      isPlayer ? 'bg-blue-100 border-2 border-blue-500' : 'bg-gray-50'
                    }`}
                  >
                    <div className="flex items-center gap-4">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                        index === 0 ? 'bg-yellow-500 text-white' :
                        index === 1 ? 'bg-gray-400 text-white' :
                        index === 2 ? 'bg-orange-600 text-white' :
                        'bg-gray-200'
                      }`}>
                        {index + 1}
                      </div>
                      <div className="text-2xl">{entry.avatar}</div>
                      <div>
                        <div className="font-semibold flex items-center gap-2">
                          {entry.playerName}
                          {isPlayer && <span className="text-blue-600 text-sm">(–¢—ã)</span>}
                        </div>
                        <div className="text-sm text-gray-600 flex items-center gap-4">
                          <span className={`bg-gradient-to-r ${entry.rank.color} bg-clip-text text-transparent font-semibold`}>
                            {entry.rank.emoji} {entry.rank.name}
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="font-bold">{entry.rankPoints} –æ—á–∫–æ–≤</div>
                      <div className="text-sm text-gray-600">{entry.tournamentsWon} –ø–æ–±–µ–¥ ‚Ä¢ {entry.winRate}% –≤–∏–Ω—Ä–µ–π—Ç</div>
                    </div>
                  </div>
                )
              })}
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (activeTab === 'ranks') {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4 mb-6">
          <Button variant="outline" onClick={onBack}>
            <Icon name="ArrowLeft" size={16} />
            –ù–∞–∑–∞–¥
          </Button>
          <h1 className="text-2xl font-bold">–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤</h1>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <Button
            onClick={() => setActiveTab('profile')}
            className={activeTab === 'profile' ? 'bg-blue-600' : ''}
          >
            <Icon name="User" size={16} />
            –ü—Ä–æ—Ñ–∏–ª—å
          </Button>
          <Button
            onClick={() => setActiveTab('leaderboard')}
            className={activeTab === 'leaderboard' ? 'bg-blue-600' : ''}
          >
            <Icon name="Trophy" size={16} />
            –õ–∏–¥–µ—Ä–±–æ—Ä–¥
          </Button>
          <Button
            onClick={() => setActiveTab('ranks')}
            className={activeTab === 'ranks' ? 'bg-blue-600' : ''}
          >
            <Icon name="Award" size={16} />
            –†–∞–Ω–≥–∏
          </Button>
        </div>

        <div className="space-y-4">
          {ranks.map((rank, index) => {
            const isCurrentRank = rank.level === currentRank.level
            return (
              <Card 
                key={rank.level} 
                className={`${isCurrentRank ? 'ring-2 ring-blue-500 shadow-lg' : ''}`}
              >
                <CardContent className="pt-6">
                  <div className={`bg-gradient-to-r ${rank.color} text-white p-4 rounded-lg mb-4`}>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <span className="text-3xl">{rank.emoji}</span>
                        <div>
                          <div className="text-xl font-bold">{rank.name}</div>
                          <div className="text-sm opacity-90">–†–∞–Ω–≥ {rank.level}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-bold">{rank.minPoints}+ –æ—á–∫–æ–≤</div>
                        {isCurrentRank && <div className="text-sm opacity-90">–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥</div>}
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-semibold mb-2">–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ —Ä–∞–Ω–≥–∞:</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      {rank.benefits.map((benefit, benefitIndex) => (
                        <li key={benefitIndex} className="flex items-center gap-2">
                          <Icon name="Check" size={14} className="text-green-600" />
                          {benefit}
                        </li>
                      ))}
                    </ul>
                  </div>
                </CardContent>
              </Card>
            )
          })}
        </div>
      </div>
    )
  }
}