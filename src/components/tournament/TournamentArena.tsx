import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import Icon from '@/components/ui/icon'
import type { Cat } from '@/types/game'
import type { Tournament } from './TournamentTypes'

interface TournamentArenaProps {
  tournament: Tournament
  selectedCat: Cat
  onTournamentWin: (reward: number, experience: number) => void
  onCatExperience: (catId: string, experience: number) => void
  onRankPointsGain: (points: number) => void
  onReset: () => void
  onTournamentComplete?: (won: boolean) => void
}

export default function TournamentArena({ tournament, selectedCat, onTournamentWin, onCatExperience, onRankPointsGain, onReset, onTournamentComplete }: TournamentArenaProps) {
  const [currentFight, setCurrentFight] = useState(0)
  const [battleLog, setBattleLog] = useState<string[]>([])
  const [isAutoFighting, setIsAutoFighting] = useState(false)
  const [fightResult, setFightResult] = useState<'win' | 'lose' | null>(null)
  const [tournamentComplete, setTournamentComplete] = useState(false)

  const calculateDamage = (attacker: any, defender: any, isWindCat: boolean = false): number => {
    const baseDamage = Math.max(1, attacker.attack - Math.floor(defender.defense / 2))
    const variance = Math.random() * 0.4 - 0.2 // ¬±20% –≤–∞—Ä–∏–∞—Ü–∏—è
    let damage = Math.floor(baseDamage * (1 + variance))
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ—Ç–∞ –í–µ—Ç–µ—Ä
    if (isWindCat && Math.random() < 0.3) {
      damage = Math.floor(damage * 2.5)
      return damage
    }
    
    return damage
  }

  const fight = () => {
    if (!selectedCat || !tournament || tournamentComplete) return

    const enemy = { ...tournament.enemies[currentFight] }
    let catHealth = selectedCat.currentHealth
    let enemyHealth = enemy.health
    const newLog: string[] = []
    const isWindCat = selectedCat.id === 'wind-cat'

    newLog.push(`ü•ä ${selectedCat.name} vs ${enemy.name} (${enemy.emoji})`)
    
    const catGoesFirst = selectedCat.currentSpeed >= enemy.speed

    while (catHealth > 0 && enemyHealth > 0) {
      if (catGoesFirst) {
        const damage = calculateDamage(selectedCat, enemy, isWindCat)
        const isWindAbility = isWindCat && damage > selectedCat.currentAttack * 2
        enemyHealth = Math.max(0, enemyHealth - damage)
        
        if (isWindAbility) {
          newLog.push(`üå™Ô∏è –£–†–ê–ì–ê–ù –í–ï–¢–†–ê! ${selectedCat.name}: ${damage} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ ‚Üí ${enemy.name} (${enemyHealth}/${enemy.maxHealth} HP)`)
        } else {
          newLog.push(`üí• ${selectedCat.name}: ${damage} —É—Ä–æ–Ω–∞ ‚Üí ${enemy.name} (${enemyHealth}/${enemy.maxHealth} HP)`)
        }
        
        if (enemyHealth <= 0) break
        
        const enemyDamage = calculateDamage(enemy, selectedCat, false)
        
        // –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ—Ç–∞ –í–µ—Ç–µ—Ä
        if (isWindCat && Math.random() < 0.25) {
          newLog.push(`üí® ${selectedCat.name} —Ä–∞—Å—Ç–≤–æ—Ä–∏–ª—Å—è –≤ –≤–µ—Ç—Ä–µ –∏ —É–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏!`)
        } else {
          catHealth = Math.max(0, catHealth - enemyDamage)
          newLog.push(`üí¢ ${enemy.name}: ${enemyDamage} —É—Ä–æ–Ω–∞ ‚Üí ${selectedCat.name} (${catHealth}/${selectedCat.maxHealth} HP)`)
        }
      } else {
        const enemyDamage = calculateDamage(enemy, selectedCat, false)
        
        // –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ—Ç–∞ –í–µ—Ç–µ—Ä
        if (isWindCat && Math.random() < 0.25) {
          newLog.push(`üí® ${selectedCat.name} —Ä–∞—Å—Ç–≤–æ—Ä–∏–ª—Å—è –≤ –≤–µ—Ç—Ä–µ –∏ —É–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏!`)
        } else {
          catHealth = Math.max(0, catHealth - enemyDamage)
          newLog.push(`üí¢ ${enemy.name}: ${enemyDamage} —É—Ä–æ–Ω–∞ ‚Üí ${selectedCat.name} (${catHealth}/${selectedCat.maxHealth} HP)`)
        }
        
        if (catHealth <= 0) break
        
        const damage = calculateDamage(selectedCat, enemy, isWindCat)
        const isWindAbility = isWindCat && damage > selectedCat.currentAttack * 2
        enemyHealth = Math.max(0, enemyHealth - damage)
        
        if (isWindAbility) {
          newLog.push(`üå™Ô∏è –£–†–ê–ì–ê–ù –í–ï–¢–†–ê! ${selectedCat.name}: ${damage} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ ‚Üí ${enemy.name} (${enemyHealth}/${enemy.maxHealth} HP)`)
        } else {
          newLog.push(`üí• ${selectedCat.name}: ${damage} —É—Ä–æ–Ω–∞ ‚Üí ${enemy.name} (${enemyHealth}/${enemy.maxHealth} HP)`)
        }
      }
    }

    if (catHealth > 0) {
      newLog.push(`üéâ ${selectedCat.name} –ø–æ–±–µ–∂–¥–∞–µ—Ç! +${enemy.reward} –º–æ–Ω–µ—Ç, +${enemy.experience} –æ–ø—ã—Ç–∞`)
      onCatExperience(selectedCat.id, enemy.experience)
      
      if (currentFight < tournament.enemies.length - 1) {
        setCurrentFight(currentFight + 1)
        newLog.push(`‚ö° –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫...`)
      } else {
        const rankPoints = tournament.enemies.length * 10 + tournament.requiredLevel * 5
        newLog.push(`üëë –¢–£–†–ù–ò–† –ó–ê–í–ï–†–®–Å–ù! –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: +${tournament.finalReward} –º–æ–Ω–µ—Ç!`)
        newLog.push(`‚≠ê –ü–æ–ª—É—á–µ–Ω–æ ${rankPoints} –æ—á–∫–æ–≤ —Ä–∞–Ω–≥–∞!`)
        onTournamentWin(tournament.finalReward + tournament.enemies.reduce((sum, e) => sum + e.reward, 0), 
                        tournament.enemies.reduce((sum, e) => sum + e.experience, 0))
        onRankPointsGain(rankPoints)
        setTournamentComplete(true)
        if (onTournamentComplete) onTournamentComplete(true)
      }
      setFightResult('win')
    } else {
      newLog.push(`üíÄ ${selectedCat.name} –ø–æ–±–µ–∂–¥—ë–Ω! –¢—É—Ä–Ω–∏—Ä –æ–∫–æ–Ω—á–µ–Ω.`)
      setFightResult('lose')
      setTournamentComplete(true)
      if (onTournamentComplete) onTournamentComplete(false)
    }

    setBattleLog(prev => [...prev, ...newLog])
  }

  const autoFight = () => {
    setIsAutoFighting(true)
    const fightInterval = setInterval(() => {
      fight()
      if (fightResult === 'lose' || tournamentComplete) {
        setIsAutoFighting(false)
        clearInterval(fightInterval)
      }
    }, 2000)
  }

  useEffect(() => {
    if (tournamentComplete) {
      setIsAutoFighting(false)
    }
  }, [tournamentComplete])

  const currentEnemy = tournament.enemies[currentFight]
  const progress = ((currentFight + (fightResult === 'win' ? 1 : 0)) / tournament.enemies.length) * 100

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—É—Ä–Ω–∏—Ä–∞ */}
      <Card className={`bg-gradient-to-r ${tournament.color} text-white`}>
        <CardHeader>
          <CardTitle className="text-2xl flex items-center gap-3">
            <span className="text-3xl">{tournament.emoji}</span>
            {tournament.name}
          </CardTitle>
          <Progress value={progress} className="bg-white/20" />
          <p className="opacity-90">
            –ë–æ–π {currentFight + 1} –∏–∑ {tournament.enemies.length}
            {!tournamentComplete && ` ‚Ä¢ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫: ${currentEnemy?.name}`}
          </p>
        </CardHeader>
      </Card>

      {/* –ë–æ–µ–≤–∞—è –∞—Ä–µ–Ω–∞ */}
      {!tournamentComplete && currentEnemy && (
        <Card>
          <CardHeader>
            <CardTitle className="text-center">–ë–æ–π—Ü–æ–≤—Å–∫–∞—è –ê—Ä–µ–Ω–∞</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 gap-8 mb-6">
              <div className="text-center space-y-2">
                <div className="text-4xl">{selectedCat.emoji}</div>
                <h3 className="font-semibold">{selectedCat.name}</h3>
                <div className="text-sm text-gray-600">–£—Ä–æ–≤–µ–Ω—å {selectedCat.level}</div>
                <div className="text-xs space-y-1">
                  <div>‚öîÔ∏è {selectedCat.currentAttack} üõ°Ô∏è {selectedCat.currentDefense}</div>
                  <div>‚ù§Ô∏è {selectedCat.currentHealth} ‚ö° {selectedCat.currentSpeed}</div>
                </div>
              </div>

              <div className="flex items-center justify-center text-2xl">VS</div>

              <div className="text-center space-y-2">
                <div className="text-4xl">{currentEnemy.emoji}</div>
                <h3 className="font-semibold">{currentEnemy.name}</h3>
                <div className="text-sm text-gray-600">–£—Ä–æ–≤–µ–Ω—å {currentEnemy.level}</div>
                <div className="text-xs space-y-1">
                  <div>‚öîÔ∏è {currentEnemy.attack} üõ°Ô∏è {currentEnemy.defense}</div>
                  <div>‚ù§Ô∏è {currentEnemy.health} ‚ö° {currentEnemy.speed}</div>
                </div>
              </div>
            </div>

            <div className="flex justify-center gap-4">
              <Button 
                onClick={fight} 
                disabled={isAutoFighting}
                className="bg-red-600 hover:bg-red-700"
              >
                <Icon name="Sword" size={16} />
                –ê—Ç–∞–∫–æ–≤–∞—Ç—å
              </Button>
              <Button 
                onClick={autoFight}
                disabled={isAutoFighting}
                variant="outline"
              >
                <Icon name="Play" size={16} />
                –ê–≤—Ç–æ-–±–æ–π
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ */}
      {tournamentComplete && (
        <Card className={fightResult === 'win' ? 'border-green-500' : 'border-red-500'}>
          <CardContent className="text-center py-8">
            {fightResult === 'win' ? (
              <div className="space-y-4">
                <div className="text-6xl">üèÜ</div>
                <h2 className="text-2xl font-bold text-green-600">–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!</h2>
                <p className="text-lg">
                  {selectedCat.name} ‚Äî –Ω–æ–≤—ã–π —á–µ–º–ø–∏–æ–Ω {tournament.name}!
                </p>
                <div className="text-xl">
                  üí∞ –û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {tournament.finalReward + tournament.enemies.reduce((sum, e) => sum + e.reward, 0)} –º–æ–Ω–µ—Ç
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="text-6xl">üíÄ</div>
                <h2 className="text-2xl font-bold text-red-600">–¢—É—Ä–Ω–∏—Ä –ø—Ä–æ–≤–∞–ª–µ–Ω</h2>
                <p className="text-lg">
                  {selectedCat.name} –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–π—Ç–∏ {tournament.name}
                </p>
                <p className="text-sm text-gray-600">
                  –ü—Ä–æ–π–¥–µ–Ω–æ –±–æ—ë–≤: {currentFight} –∏–∑ {tournament.enemies.length}
                </p>
              </div>
            )}
            <Button onClick={onReset} className="mt-4">
              <Icon name="RotateCcw" size={16} />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
            </Button>
          </CardContent>
        </Card>
      )}

      {/* –õ–æ–≥ –±–æ—è */}
      {battleLog.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name="ScrollText" size={20} />
              –õ–æ–≥ —Ç—É—Ä–Ω–∏—Ä–∞
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm max-h-64 overflow-y-auto space-y-1">
              {battleLog.map((log, index) => (
                <div key={index}>{log}</div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}