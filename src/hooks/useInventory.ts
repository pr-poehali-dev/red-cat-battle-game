import { useState } from 'react'
import { Equipment, BattleCat } from '@/types/cats'
import { equipmentData } from '@/hooks/useCatData'

export const useInventory = () => {
  const [inventory, setInventory] = useState<Equipment[]>([
    {
      id: 'laser-sword',
      name: '–õ–∞–∑–µ—Ä–Ω—ã–π –º–µ—á',
      type: 'weapon',
      rarity: 'rare',
      level: 1,
      bonuses: { attack: 8 },
      description: '–°–≤–µ—Ç—è—â–∏–π—Å—è –∫–ª–∏–Ω–æ–∫ –∏–∑ —á–∏—Å—Ç–æ–π —ç–Ω–µ—Ä–≥–∏–∏',
      icon: '‚öîÔ∏è'
    },
    {
      id: 'cosmic-armor',
      name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è',
      type: 'armor',
      rarity: 'epic',
      level: 1,
      bonuses: { defense: 12, health: 25 },
      description: '–ó–∞—â–∏—Ç–Ω—ã–π –∫–æ—Å—Ç—é–º –∏–∑ –∑–≤–µ–∑–¥–Ω–æ–≥–æ –º–µ—Ç–∞–ª–ª–∞',
      icon: 'üõ°Ô∏è'
    },
    {
      id: 'speed-boots',
      name: '–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∞–ø–æ–≥–∏',
      type: 'accessory',
      rarity: 'rare',
      level: 1,
      bonuses: { speed: 10 },
      description: '–£–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è',
      icon: 'üë¢'
    }
  ])

  const [selectedCat, setSelectedCat] = useState<string | null>(null)
  const [showEquipment, setShowEquipment] = useState(false)

  const generateRandomEquipment = () => {
    const types: ('weapon' | 'armor' | 'accessory')[] = ['weapon', 'armor', 'accessory']
    const type = types[Math.floor(Math.random() * types.length)]
    
    const rarityRoll = Math.random()
    let rarity: 'common' | 'rare' | 'epic' | 'legendary'
    
    if (rarityRoll < 0.5) rarity = 'common'
    else if (rarityRoll < 0.8) rarity = 'rare'
    else if (rarityRoll < 0.95) rarity = 'epic'
    else rarity = 'legendary'

    const data = equipmentData[type]
    const name = data.names[Math.floor(Math.random() * data.names.length)]
    const icon = data.icons[Math.floor(Math.random() * data.icons.length)]
    const bonuses = data.bonuses(rarity)

    return {
      id: `${type}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      name,
      type,
      rarity,
      level: 1,
      bonuses,
      description: `${rarity === 'legendary' ? '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π' : rarity === 'epic' ? '–≠–ø–∏—á–µ—Å–∫–∏–π' : rarity === 'rare' ? '–†–µ–¥–∫–∏–π' : '–û–±—ã—á–Ω—ã–π'} –ø—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏`,
      icon
    }
  }

  const handleFindEquipment = () => {
    const newEquipment = generateRandomEquipment()
    setInventory(prev => [...prev, newEquipment])
  }

  const handleEquipItem = (catId: string, equipment: Equipment, setCats: React.Dispatch<React.SetStateAction<BattleCat[]>>) => {
    setCats(prev => prev.map(cat => {
      if (cat.id === catId) {
        return {
          ...cat,
          equipment: {
            ...cat.equipment,
            [equipment.type]: equipment
          }
        }
      }
      return cat
    }))

    setInventory(prev => prev.filter(item => item.id !== equipment.id))
  }

  const handleUnequipItem = (catId: string, equipmentType: 'weapon' | 'armor' | 'accessory', cats: BattleCat[], setCats: React.Dispatch<React.SetStateAction<BattleCat[]>>) => {
    const cat = cats.find(c => c.id === catId)
    const equipment = cat?.equipment[equipmentType]
    
    if (equipment) {
      setInventory(prev => [...prev, equipment])
      
      setCats(prev => prev.map(c => {
        if (c.id === catId) {
          const newEquipment = { ...c.equipment }
          delete newEquipment[equipmentType]
          return { ...c, equipment: newEquipment }
        }
        return c
      }))
    }
  }

  return {
    inventory,
    setInventory,
    selectedCat,
    setSelectedCat,
    showEquipment,
    setShowEquipment,
    handleFindEquipment,
    handleEquipItem,
    handleUnequipItem
  }
}